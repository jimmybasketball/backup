<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sfebiz.supplychain.persistence.base.stock.dao.StockBatchDailyDao">

<resultMap id="stockBatchDailyDOResult" type="com.sfebiz.supplychain.persistence.base.stock.domain.StockBatchDailyDO">
    <result column="id" property="id"/>
    <result column="purchase_stockin_available_count" property="purchaseStockinAvailableCount"/>
    <result column="transfer_stockin_available_count" property="transferStockinAvailableCount"/>
    <result column="transfer_stockin_damaged_count" property="transferStockinDamagedCount"/>
    <result column="sale_return_stockin_available_count" property="saleReturnStockinAvailableCount"/>
    <result column="sale_return_stockin_damaged_count" property="saleReturnStockinDamagedCount"/>
    <result column="custom_return_stockin_available_count" property="customReturnStockinAvailableCount"/>
    <result column="custom_return_stockin_damaged_count" property="customReturnStockinDamagedCount"/>
    <result column="sale_cancel_stockout_available_count" property="saleCancelStockoutAvailableCount"/>
    <result column="purchase_stockout_available_count" property="purchaseStockoutAvailableCount"/>
    <result column="purchase_stockout_damaged_count" property="purchaseStockoutDamagedCount"/>
    <result column="adjust_available_count" property="adjustAvailableCount"/>
    <result column="adjust_damaged_count" property="adjustDamagedCount"/>
    <result column="start_available_count" property="startAvailableCount"/>
    <result column="end_available_count" property="endAvailableCount"/>
    <result column="start_damaged_count" property="startDamagedCount"/>
    <result column="end_damaged_count" property="endDamagedCount"/>
    <result column="gmt_modified" property="gmtModified"/>
    <result column="record_date" property="recordDate"/>
    <result column="warehouse_id" property="warehouseId"/>
    <result column="merchant_provider_id" property="merchantProviderId"/>
    <result column="report_losses_avalible_count" property="reportLossesAvalibleCount"/>
    <result column="report_losses_damaged_count" property="reportLossesDamagedCount"/>
    <result column="report_gains_avalible_count" property="reportGainsAvalibleCount"/>
    <result column="report_gains_damaged_count" property="reportGainsDamagedCount"/>
    <result column="sale_stockout_available_count" property="saleStockoutAvailableCount"/>
    <result column="sku_id" property="skuId"/>
    <result column="batch_no" property="batchNo"/>
    <result column="merchant_id" property="merchantId"/>
    <result column="gmt_create" property="gmtCreate"/>
</resultMap>

<sql id="stockBatchDailyDO_columns">
    id,
    purchase_stockin_available_count,
    transfer_stockin_available_count,
    transfer_stockin_damaged_count,
    sale_return_stockin_available_count,
    sale_return_stockin_damaged_count,
    custom_return_stockin_available_count,
    custom_return_stockin_damaged_count,
    sale_cancel_stockout_available_count,
    purchase_stockout_available_count,
    purchase_stockout_damaged_count,
    adjust_available_count,
    adjust_damaged_count,
    start_available_count,
    end_available_count,
    start_damaged_count,
    end_damaged_count,
    gmt_modified,
    record_date,
    warehouse_id,
    merchant_provider_id,
    report_losses_avalible_count,
    report_losses_damaged_count,
    report_gains_avalible_count,
    report_gains_damaged_count,
    sale_stockout_available_count,
    sku_id,
    batch_no,
    merchant_id,
    gmt_create
</sql>

<sql id="stockBatchDailyDO_sqlForInsert">
    id,
    purchase_stockin_available_count,
    transfer_stockin_available_count,
    transfer_stockin_damaged_count,
    sale_return_stockin_available_count,
    sale_return_stockin_damaged_count,
    custom_return_stockin_available_count,
    custom_return_stockin_damaged_count,
    sale_cancel_stockout_available_count,
    purchase_stockout_available_count,
    purchase_stockout_damaged_count,
    adjust_available_count,
    adjust_damaged_count,
    start_available_count,
    end_available_count,
    start_damaged_count,
    end_damaged_count,
    gmt_modified,
    record_date,
    warehouse_id,
    merchant_provider_id,
    report_losses_avalible_count,
    report_losses_damaged_count,
    report_gains_avalible_count,
    report_gains_damaged_count,
    sale_stockout_available_count,
    sku_id,
    batch_no,
    merchant_id,
    gmt_create
</sql>

<sql id="stockBatchDailyDO_columnsForInsert">
    #{id},
    #{purchaseStockinAvailableCount},
    #{transferStockinAvailableCount},
    #{transferStockinDamagedCount},
    #{saleReturnStockinAvailableCount},
    #{saleReturnStockinDamagedCount},
    #{customReturnStockinAvailableCount},
    #{customReturnStockinDamagedCount},
    #{saleCancelStockoutAvailableCount},
    #{purchaseStockoutAvailableCount},
    #{purchaseStockoutDamagedCount},
    #{adjustAvailableCount},
    #{adjustDamagedCount},
    #{startAvailableCount},
    #{endAvailableCount},
    #{startDamagedCount},
    #{endDamagedCount},
    now(),
    #{recordDate},
    #{warehouseId},
    #{merchantProviderId},
    #{reportLossesAvalibleCount},
    #{reportLossesDamagedCount},
    #{reportGainsAvalibleCount},
    #{reportGainsDamagedCount},
    #{saleStockoutAvailableCount},
    #{skuId},
    #{batchNo},
    #{merchantId},
    now()
</sql>

<sql id="stockBatchDailyDO_setterForUpdate">
    <set>
        gmt_modified = now(),
        <if test="purchaseStockinAvailableCount != null">
            purchase_stockin_available_count = #{purchaseStockinAvailableCount},
        </if>
        <if test="transferStockinAvailableCount != null">
            transfer_stockin_available_count = #{transferStockinAvailableCount},
        </if>
        <if test="transferStockinDamagedCount != null">
            transfer_stockin_damaged_count = #{transferStockinDamagedCount},
        </if>
        <if test="saleReturnStockinAvailableCount != null">
            sale_return_stockin_available_count = #{saleReturnStockinAvailableCount},
        </if>
        <if test="saleReturnStockinDamagedCount != null">
            sale_return_stockin_damaged_count = #{saleReturnStockinDamagedCount},
        </if>
        <if test="customReturnStockinAvailableCount != null">
            custom_return_stockin_available_count = #{customReturnStockinAvailableCount},
        </if>
        <if test="customReturnStockinDamagedCount != null">
            custom_return_stockin_damaged_count = #{customReturnStockinDamagedCount},
        </if>
        <if test="saleCancelStockoutAvailableCount != null">
            sale_cancel_stockout_available_count = #{saleCancelStockoutAvailableCount},
        </if>
        <if test="purchaseStockoutAvailableCount != null">
            purchase_stockout_available_count = #{purchaseStockoutAvailableCount},
        </if>
        <if test="purchaseStockoutDamagedCount != null">
            purchase_stockout_damaged_count = #{purchaseStockoutDamagedCount},
        </if>
        <if test="adjustAvailableCount != null">
            adjust_available_count = #{adjustAvailableCount},
        </if>
        <if test="adjustDamagedCount != null">
            adjust_damaged_count = #{adjustDamagedCount},
        </if>
        <if test="startAvailableCount != null">
            start_available_count = #{startAvailableCount},
        </if>
        <if test="endAvailableCount != null">
            end_available_count = #{endAvailableCount},
        </if>
        <if test="startDamagedCount != null">
            start_damaged_count = #{startDamagedCount},
        </if>
        <if test="endDamagedCount != null">
            end_damaged_count = #{endDamagedCount},
        </if>
        <if test="recordDate != null">
            record_date = #{recordDate},
        </if>
        <if test="warehouseId != null">
            warehouse_id = #{warehouseId},
        </if>
        <if test="merchantProviderId != null">
            merchant_provider_id = #{merchantProviderId},
        </if>
        <if test="reportLossesAvalibleCount != null">
            report_losses_avalible_count = #{reportLossesAvalibleCount},
        </if>
        <if test="reportLossesDamagedCount != null">
            report_losses_damaged_count = #{reportLossesDamagedCount},
        </if>
        <if test="reportGainsAvalibleCount != null">
            report_gains_avalible_count = #{reportGainsAvalibleCount},
        </if>
        <if test="reportGainsDamagedCount != null">
            report_gains_damaged_count = #{reportGainsDamagedCount},
        </if>
        <if test="saleStockoutAvailableCount != null">
            sale_stockout_available_count = #{saleStockoutAvailableCount},
        </if>
        <if test="skuId != null">
            sku_id = #{skuId},
        </if>
        <if test="batchNo != null">
            batch_no = #{batchNo},
        </if>
        <if test="merchantId != null">
            merchant_id = #{merchantId},
        </if>
    </set>
</sql>

<sql id="stockBatchDailyDO_selector">
    select
    <include refid="stockBatchDailyDO_columns"/>
    from sc_stock_batch_daily
</sql>

<sql id="stockBatchDailyDO_query_segment">
    <trim prefix="WHERE" prefixOverrides="AND|OR">
        <if test="data.id != null">
            AND id = #{data.id}
        </if>
        <if test="data.purchaseStockinAvailableCount != null">
            AND purchase_stockin_available_count = #{data.purchaseStockinAvailableCount}
        </if>
        <if test="data.transferStockinAvailableCount != null">
            AND transfer_stockin_available_count = #{data.transferStockinAvailableCount}
        </if>
        <if test="data.transferStockinDamagedCount != null">
            AND transfer_stockin_damaged_count = #{data.transferStockinDamagedCount}
        </if>
        <if test="data.saleReturnStockinAvailableCount != null">
            AND sale_return_stockin_available_count = #{data.saleReturnStockinAvailableCount}
        </if>
        <if test="data.saleReturnStockinDamagedCount != null">
            AND sale_return_stockin_damaged_count = #{data.saleReturnStockinDamagedCount}
        </if>
        <if test="data.customReturnStockinAvailableCount != null">
            AND custom_return_stockin_available_count = #{data.customReturnStockinAvailableCount}
        </if>
        <if test="data.customReturnStockinDamagedCount != null">
            AND custom_return_stockin_damaged_count = #{data.customReturnStockinDamagedCount}
        </if>
        <if test="data.saleCancelStockoutAvailableCount != null">
            AND sale_cancel_stockout_available_count = #{data.saleCancelStockoutAvailableCount}
        </if>
        <if test="data.purchaseStockoutAvailableCount != null">
            AND purchase_stockout_available_count = #{data.purchaseStockoutAvailableCount}
        </if>
        <if test="data.purchaseStockoutDamagedCount != null">
            AND purchase_stockout_damaged_count = #{data.purchaseStockoutDamagedCount}
        </if>
        <if test="data.adjustAvailableCount != null">
            AND adjust_available_count = #{data.adjustAvailableCount}
        </if>
        <if test="data.adjustDamagedCount != null">
            AND adjust_damaged_count = #{data.adjustDamagedCount}
        </if>
        <if test="data.startAvailableCount != null">
            AND start_available_count = #{data.startAvailableCount}
        </if>
        <if test="data.endAvailableCount != null">
            AND end_available_count = #{data.endAvailableCount}
        </if>
        <if test="data.startDamagedCount != null">
            AND start_damaged_count = #{data.startDamagedCount}
        </if>
        <if test="data.endDamagedCount != null">
            AND end_damaged_count = #{data.endDamagedCount}
        </if>
        <if test="data.gmtModified != null">
            AND gmt_modified = #{data.gmtModified}
        </if>
        <if test="data.recordDate != null">
            AND record_date = #{data.recordDate}
        </if>
        <if test="data.warehouseId != null">
            AND warehouse_id = #{data.warehouseId}
        </if>
        <if test="data.merchantProviderId != null">
            AND merchant_provider_id = #{data.merchantProviderId}
        </if>
        <if test="data.reportLossesAvalibleCount != null">
            AND report_losses_avalible_count = #{data.reportLossesAvalibleCount}
        </if>
        <if test="data.reportLossesDamagedCount != null">
            AND report_losses_damaged_count = #{data.reportLossesDamagedCount}
        </if>
        <if test="data.reportGainsAvalibleCount != null">
            AND report_gains_avalible_count = #{data.reportGainsAvalibleCount}
        </if>
        <if test="data.reportGainsDamagedCount != null">
            AND report_gains_damaged_count = #{data.reportGainsDamagedCount}
        </if>
        <if test="data.saleStockoutAvailableCount != null">
            AND sale_stockout_available_count = #{data.saleStockoutAvailableCount}
        </if>
        <if test="data.skuId != null">
            AND sku_id = #{data.skuId}
        </if>
        <if test="data.batchNo != null">
            AND batch_no = #{data.batchNo}
        </if>
        <if test="data.merchantId != null">
            AND merchant_id = #{data.merchantId}
        </if>
        <if test="data.gmtCreate != null">
            AND gmt_create = #{data.gmtCreate}
        </if>
        <if test="ins != null and ins != ''">
            AND
            <foreach collection="ins" item="item" open="(" separator="and" close=")">
                ${item.column} in
                <foreach collection="item.values" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </foreach>
        </if>
        <if test="notIns != null and notIns != ''">
            AND
            <foreach collection="notIns" item="item" open="(" separator="and" close=")">
                ${item.column} not in
                <foreach collection="item.values" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </foreach>
        </if>
        <if test="equals != null and equals != ''">
            AND
            <foreach collection="equals" item="item" open="(" separator="and" close=")">
                ${item.column} = #{item.value}
            </foreach>
        </if>
        <if test="notEquals != null and notEquals != ''">
            AND
            <foreach collection="notEquals" item="item" open="(" separator="and" close=")">
                ${item.column} = #{item.value}
            </foreach>
        </if>
        <if test="lts != null and lts != ''">
            AND
            <foreach collection="lts" item="item" open="(" separator="and" close=")">
                ${item.column} <![CDATA[ < ]]> #{item.value}
            </foreach>
        </if>
        <if test="gts != null and gts != ''">
            AND
            <foreach collection="gts" item="item" open="(" separator="and" close=")">
                ${item.column} <![CDATA[ > ]]> #{item.value}
            </foreach>
        </if>
        <if test="likes != null and likes != ''">
            AND
            <foreach collection="likes" item="item" open="(" separator="and" close=")">
                ${item.column} like concat('%', #{item.value}, '%')
            </foreach>
        </if>
        <if test="ltes != null and ltes != ''">
            AND
            <foreach collection="ltes" item="item" open="(" separator="and" close=")">
                ${item.column} <![CDATA[ <= ]]> #{item.value}
            </foreach>
        </if>
        <if test="gtes != null and gtes != ''">
            AND
            <foreach collection="gtes" item="item" open="(" separator="and" close=")">
                ${item.column} <![CDATA[ >= ]]> #{item.value}
            </foreach>
        </if>
        <if test="ranges != null and ranges != ''">
            AND
            <foreach collection="ranges" item="item" open="(" separator="and" close=")">
                ${item.column} <![CDATA[ >= ]]> #{item.from} and ${item.column} <![CDATA[ < ]]> #{item.to}
            </foreach>
        </if>
        AND is_delete = 0
    </trim>
</sql>


<insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="com.sfebiz.supplychain.persistence.base.stock.domain.StockBatchDailyDO">
    insert into sc_stock_batch_daily
    (
        <include refid="stockBatchDailyDO_sqlForInsert"/>
        ,is_delete
    )
    values
    (
        <include refid="stockBatchDailyDO_columnsForInsert"/>
        ,0
    )
</insert>

<update id="update" parameterType="com.sfebiz.supplychain.persistence.base.stock.domain.StockBatchDailyDO">
    update sc_stock_batch_daily
    <include refid="stockBatchDailyDO_setterForUpdate" />
    where id = #{id}
    and is_delete = 0
</update>


<update id="updateByQuery" parameterType="com.sfebiz.supplychain.persistence.base.stock.domain.StockBatchDailyDO">
    update sc_stock_batch_daily
    <set>
        gmt_modified = now(),
        <if test="update.purchaseStockinAvailableCount != null">
            purchase_stockin_available_count = #{update.purchaseStockinAvailableCount},
        </if>
        <if test="update.transferStockinAvailableCount != null">
            transfer_stockin_available_count = #{update.transferStockinAvailableCount},
        </if>
        <if test="update.transferStockinDamagedCount != null">
            transfer_stockin_damaged_count = #{update.transferStockinDamagedCount},
        </if>
        <if test="update.saleReturnStockinAvailableCount != null">
            sale_return_stockin_available_count = #{update.saleReturnStockinAvailableCount},
        </if>
        <if test="update.saleReturnStockinDamagedCount != null">
            sale_return_stockin_damaged_count = #{update.saleReturnStockinDamagedCount},
        </if>
        <if test="update.customReturnStockinAvailableCount != null">
            custom_return_stockin_available_count = #{update.customReturnStockinAvailableCount},
        </if>
        <if test="update.customReturnStockinDamagedCount != null">
            custom_return_stockin_damaged_count = #{update.customReturnStockinDamagedCount},
        </if>
        <if test="update.saleCancelStockoutAvailableCount != null">
            sale_cancel_stockout_available_count = #{update.saleCancelStockoutAvailableCount},
        </if>
        <if test="update.purchaseStockoutAvailableCount != null">
            purchase_stockout_available_count = #{update.purchaseStockoutAvailableCount},
        </if>
        <if test="update.purchaseStockoutDamagedCount != null">
            purchase_stockout_damaged_count = #{update.purchaseStockoutDamagedCount},
        </if>
        <if test="update.adjustAvailableCount != null">
            adjust_available_count = #{update.adjustAvailableCount},
        </if>
        <if test="update.adjustDamagedCount != null">
            adjust_damaged_count = #{update.adjustDamagedCount},
        </if>
        <if test="update.startAvailableCount != null">
            start_available_count = #{update.startAvailableCount},
        </if>
        <if test="update.endAvailableCount != null">
            end_available_count = #{update.endAvailableCount},
        </if>
        <if test="update.startDamagedCount != null">
            start_damaged_count = #{update.startDamagedCount},
        </if>
        <if test="update.endDamagedCount != null">
            end_damaged_count = #{update.endDamagedCount},
        </if>
        <if test="update.recordDate != null">
            record_date = #{update.recordDate},
        </if>
        <if test="update.warehouseId != null">
            warehouse_id = #{update.warehouseId},
        </if>
        <if test="update.merchantProviderId != null">
            merchant_provider_id = #{update.merchantProviderId},
        </if>
        <if test="update.reportLossesAvalibleCount != null">
            report_losses_avalible_count = #{update.reportLossesAvalibleCount},
        </if>
        <if test="update.reportLossesDamagedCount != null">
            report_losses_damaged_count = #{update.reportLossesDamagedCount},
        </if>
        <if test="update.reportGainsAvalibleCount != null">
            report_gains_avalible_count = #{update.reportGainsAvalibleCount},
        </if>
        <if test="update.reportGainsDamagedCount != null">
            report_gains_damaged_count = #{update.reportGainsDamagedCount},
        </if>
        <if test="update.saleStockoutAvailableCount != null">
            sale_stockout_available_count = #{update.saleStockoutAvailableCount},
        </if>
        <if test="update.skuId != null">
            sku_id = #{update.skuId},
        </if>
        <if test="update.batchNo != null">
            batch_no = #{update.batchNo},
        </if>
        <if test="update.merchantId != null">
            merchant_id = #{update.merchantId},
        </if>
    </set>
    <include refid="stockBatchDailyDO_query_segment"/>
</update>


<insert id="insertOrUpdate" useGeneratedKeys="true" keyProperty="id" parameterType="com.sfebiz.supplychain.persistence.base.stock.domain.StockBatchDailyDO">
    insert into sc_stock_batch_daily
    (
        <include refid="stockBatchDailyDO_sqlForInsert"/>
        ,is_delete
    )
    values
    (
        <include refid="stockBatchDailyDO_columnsForInsert"/>
        ,0
    )
    on duplicate key update
    gmt_modified = now()
    ,is_delete = 0
    <if test="purchaseStockinAvailableCount != null">
        ,purchase_stockin_available_count = #{purchaseStockinAvailableCount}
    </if>
    <if test="transferStockinAvailableCount != null">
        ,transfer_stockin_available_count = #{transferStockinAvailableCount}
    </if>
    <if test="transferStockinDamagedCount != null">
        ,transfer_stockin_damaged_count = #{transferStockinDamagedCount}
    </if>
    <if test="saleReturnStockinAvailableCount != null">
        ,sale_return_stockin_available_count = #{saleReturnStockinAvailableCount}
    </if>
    <if test="saleReturnStockinDamagedCount != null">
        ,sale_return_stockin_damaged_count = #{saleReturnStockinDamagedCount}
    </if>
    <if test="customReturnStockinAvailableCount != null">
        ,custom_return_stockin_available_count = #{customReturnStockinAvailableCount}
    </if>
    <if test="customReturnStockinDamagedCount != null">
        ,custom_return_stockin_damaged_count = #{customReturnStockinDamagedCount}
    </if>
    <if test="saleCancelStockoutAvailableCount != null">
        ,sale_cancel_stockout_available_count = #{saleCancelStockoutAvailableCount}
    </if>
    <if test="purchaseStockoutAvailableCount != null">
        ,purchase_stockout_available_count = #{purchaseStockoutAvailableCount}
    </if>
    <if test="purchaseStockoutDamagedCount != null">
        ,purchase_stockout_damaged_count = #{purchaseStockoutDamagedCount}
    </if>
    <if test="adjustAvailableCount != null">
        ,adjust_available_count = #{adjustAvailableCount}
    </if>
    <if test="adjustDamagedCount != null">
        ,adjust_damaged_count = #{adjustDamagedCount}
    </if>
    <if test="startAvailableCount != null">
        ,start_available_count = #{startAvailableCount}
    </if>
    <if test="endAvailableCount != null">
        ,end_available_count = #{endAvailableCount}
    </if>
    <if test="startDamagedCount != null">
        ,start_damaged_count = #{startDamagedCount}
    </if>
    <if test="endDamagedCount != null">
        ,end_damaged_count = #{endDamagedCount}
    </if>
    <if test="recordDate != null">
        ,record_date = #{recordDate}
    </if>
    <if test="warehouseId != null">
        ,warehouse_id = #{warehouseId}
    </if>
    <if test="merchantProviderId != null">
        ,merchant_provider_id = #{merchantProviderId}
    </if>
    <if test="reportLossesAvalibleCount != null">
        ,report_losses_avalible_count = #{reportLossesAvalibleCount}
    </if>
    <if test="reportLossesDamagedCount != null">
        ,report_losses_damaged_count = #{reportLossesDamagedCount}
    </if>
    <if test="reportGainsAvalibleCount != null">
        ,report_gains_avalible_count = #{reportGainsAvalibleCount}
    </if>
    <if test="reportGainsDamagedCount != null">
        ,report_gains_damaged_count = #{reportGainsDamagedCount}
    </if>
    <if test="saleStockoutAvailableCount != null">
        ,sale_stockout_available_count = #{saleStockoutAvailableCount}
    </if>
    <if test="skuId != null">
        ,sku_id = #{skuId}
    </if>
    <if test="batchNo != null">
        ,batch_no = #{batchNo}
    </if>
    <if test="merchantId != null">
        ,merchant_id = #{merchantId}
    </if>
</insert>

<!-- Delete -->
<update id="delete">
    update sc_stock_batch_daily
    set is_delete = 1, gmt_modified = now()
    <include refid="stockBatchDailyDO_query_segment"/>
</update>
<update id="deleteById">
    update sc_stock_batch_daily
    set is_delete = 1, gmt_modified = now()
    where id = #{id}
</update>





<!-- query class -->
<sql id="stockBatchDailyDO_groupBy">
    <if test="groupBys != null and groupBys != ''">
        group by
        <foreach collection="groupBys" item="item" open="" separator="," close="">
            #{item}
        </foreach>
    </if>
</sql>

<sql id="stockBatchDailyDO_orderby">
    <if test="orderBys != null and orderBys != ''">
        order by
        <foreach collection="orderBys" item="item" open="" separator="," close="">
            ${item.column} ${item.direction}
        </foreach>
    </if>
</sql>


<select id="query" resultMap="stockBatchDailyDOResult" parameterType="com.sfebiz.supplychain.persistence.base.stock.domain.StockBatchDailyDO">
    <include refid="stockBatchDailyDO_selector"/>
    <include refid="stockBatchDailyDO_query_segment"/>
    <include refid="stockBatchDailyDO_groupBy"/>
    <include refid="stockBatchDailyDO_orderby"/>
</select>

<select id="query4Page" resultMap="stockBatchDailyDOResult" parameterType="com.sfebiz.supplychain.persistence.base.stock.domain.StockBatchDailyDO">
    <include refid="stockBatchDailyDO_selector"/>
    <include refid="stockBatchDailyDO_query_segment"/>
    <include refid="stockBatchDailyDO_groupBy"/>
    <include refid="stockBatchDailyDO_orderby"/>
    limit ${startRowForMysql}, ${pageSize}
</select>


<select id="count" resultType="java.lang.Long">
    SELECT COUNT(1) FROM sc_stock_batch_daily
    <include refid="stockBatchDailyDO_query_segment"/>
</select>

<select id="getById" resultMap="stockBatchDailyDOResult">
    <include refid="stockBatchDailyDO_selector"/>
    where id = #{id}
    and is_delete = 0
</select>

<select id="getByIdForUpdate" resultMap="stockBatchDailyDOResult">
    <include refid="stockBatchDailyDO_selector"/>
    where id = #{id}
    and is_delete = 0
    for update
</select>

</mapper>
