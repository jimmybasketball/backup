<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sfebiz.supplychain.persistence.base.stockout.dao.StockoutOrderTaskDao">

<resultMap id="stockoutOrderTaskDOResult" type="com.sfebiz.supplychain.persistence.base.stockout.domain.StockoutOrderTaskDO">
    <result column="stockout_order_state" property="stockoutOrderState"/>
    <result column="stockout_order_id" property="stockoutOrderId"/>
    <result column="sub_task_type" property="subTaskType"/>
    <result column="task_operator" property="taskOperator"/>
    <result column="retry_excute_time" property="retryExcuteTime"/>
    <result column="task_desc" property="taskDesc"/>
    <result column="biz_id" property="bizId"/>
    <result column="task_owner" property="taskOwner"/>
    <result column="task_memo" property="taskMemo"/>
    <result column="features" property="features"/>
    <result column="merchant_id" property="merchantId"/>
    <result column="retry_times" property="retryTimes"/>
    <result column="task_type" property="taskType"/>
    <result column="task_state" property="taskState"/>
    <result column="id" property="id"/>
    <result column="gmt_create" property="gmtCreate"/>
    <result column="gmt_modified" property="gmtModified"/>
</resultMap>

<sql id="stockoutOrderTaskDO_columns">
    stockout_order_state,
    stockout_order_id,
    sub_task_type,
    task_operator,
    retry_excute_time,
    task_desc,
    biz_id,
    task_owner,
    task_memo,
    features,
    merchant_id,
    retry_times,
    task_type,
    task_state,
    id,
    gmt_create,
    gmt_modified
</sql>

<sql id="stockoutOrderTaskDO_sqlForInsert">
    stockout_order_state,
    stockout_order_id,
    sub_task_type,
    task_operator,
    retry_excute_time,
    task_desc,
    biz_id,
    task_owner,
    task_memo,
    features,
    merchant_id,
    retry_times,
    task_type,
    task_state,
    id,
    gmt_create,
    gmt_modified
</sql>

<sql id="stockoutOrderTaskDO_columnsForInsert">
    #{stockoutOrderState},
    #{stockoutOrderId},
    #{subTaskType},
    #{taskOperator},
    #{retryExcuteTime},
    #{taskDesc},
    #{bizId},
    #{taskOwner},
    #{taskMemo},
    #{features},
    #{merchantId},
    #{retryTimes},
    #{taskType},
    #{taskState},
    #{id},
    now(),
    now()
</sql>

<sql id="stockoutOrderTaskDO_setterForUpdate">
    <set>
        gmt_modified = now(),
        <if test="stockoutOrderState != null">
            stockout_order_state = #{stockoutOrderState},
        </if>
        <if test="stockoutOrderId != null">
            stockout_order_id = #{stockoutOrderId},
        </if>
        <if test="subTaskType != null">
            sub_task_type = #{subTaskType},
        </if>
        <if test="taskOperator != null">
            task_operator = #{taskOperator},
        </if>
        <if test="retryExcuteTime != null">
            retry_excute_time = #{retryExcuteTime},
        </if>
        <if test="taskDesc != null">
            task_desc = #{taskDesc},
        </if>
        <if test="bizId != null">
            biz_id = #{bizId},
        </if>
        <if test="taskOwner != null">
            task_owner = #{taskOwner},
        </if>
        <if test="taskMemo != null">
            task_memo = #{taskMemo},
        </if>
        <if test="features != null">
            features = #{features},
        </if>
        <if test="merchantId != null">
            merchant_id = #{merchantId},
        </if>
        <if test="retryTimes != null">
            retry_times = #{retryTimes},
        </if>
        <if test="taskType != null">
            task_type = #{taskType},
        </if>
        <if test="taskState != null">
            task_state = #{taskState},
        </if>
    </set>
</sql>

<sql id="stockoutOrderTaskDO_selector">
    select
    <include refid="stockoutOrderTaskDO_columns"/>
    from sc_stockout_order_task
</sql>

<sql id="stockoutOrderTaskDO_query_segment">
    <trim prefix="WHERE" prefixOverrides="AND|OR">
        <if test="data.stockoutOrderState != null">
            AND stockout_order_state = #{data.stockoutOrderState}
        </if>
        <if test="data.stockoutOrderId != null">
            AND stockout_order_id = #{data.stockoutOrderId}
        </if>
        <if test="data.subTaskType != null">
            AND sub_task_type = #{data.subTaskType}
        </if>
        <if test="data.taskOperator != null">
            AND task_operator = #{data.taskOperator}
        </if>
        <if test="data.retryExcuteTime != null">
            AND retry_excute_time = #{data.retryExcuteTime}
        </if>
        <if test="data.taskDesc != null">
            AND task_desc = #{data.taskDesc}
        </if>
        <if test="data.bizId != null">
            AND biz_id = #{data.bizId}
        </if>
        <if test="data.taskOwner != null">
            AND task_owner = #{data.taskOwner}
        </if>
        <if test="data.taskMemo != null">
            AND task_memo = #{data.taskMemo}
        </if>
        <if test="data.features != null">
            AND features = #{data.features}
        </if>
        <if test="data.merchantId != null">
            AND merchant_id = #{data.merchantId}
        </if>
        <if test="data.retryTimes != null">
            AND retry_times = #{data.retryTimes}
        </if>
        <if test="data.taskType != null">
            AND task_type = #{data.taskType}
        </if>
        <if test="data.taskState != null">
            AND task_state = #{data.taskState}
        </if>
        <if test="data.id != null">
            AND id = #{data.id}
        </if>
        <if test="data.gmtCreate != null">
            AND gmt_create = #{data.gmtCreate}
        </if>
        <if test="data.gmtModified != null">
            AND gmt_modified = #{data.gmtModified}
        </if>
        <if test="ins != null and ins != ''">
            AND
            <foreach collection="ins" item="item" open="(" separator="and" close=")">
                ${item.column} in
                <foreach collection="item.values" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </foreach>
        </if>
        <if test="notIns != null and notIns != ''">
            AND
            <foreach collection="notIns" item="item" open="(" separator="and" close=")">
                ${item.column} not in
                <foreach collection="item.values" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </foreach>
        </if>
        <if test="equals != null and equals != ''">
            AND
            <foreach collection="equals" item="item" open="(" separator="and" close=")">
                ${item.column} = #{item.value}
            </foreach>
        </if>
        <if test="notEquals != null and notEquals != ''">
            AND
            <foreach collection="notEquals" item="item" open="(" separator="and" close=")">
                ${item.column} = #{item.value}
            </foreach>
        </if>
        <if test="lts != null and lts != ''">
            AND
            <foreach collection="lts" item="item" open="(" separator="and" close=")">
                ${item.column} <![CDATA[ < ]]> #{item.value}
            </foreach>
        </if>
        <if test="gts != null and gts != ''">
            AND
            <foreach collection="gts" item="item" open="(" separator="and" close=")">
                ${item.column} <![CDATA[ > ]]> #{item.value}
            </foreach>
        </if>
        <if test="likes != null and likes != ''">
            AND
            <foreach collection="likes" item="item" open="(" separator="and" close=")">
                ${item.column} like concat('%', #{item.value}, '%')
            </foreach>
        </if>
        <if test="ltes != null and ltes != ''">
            AND
            <foreach collection="ltes" item="item" open="(" separator="and" close=")">
                ${item.column} <![CDATA[ <= ]]> #{item.value}
            </foreach>
        </if>
        <if test="gtes != null and gtes != ''">
            AND
            <foreach collection="gtes" item="item" open="(" separator="and" close=")">
                ${item.column} <![CDATA[ >= ]]> #{item.value}
            </foreach>
        </if>
        <if test="ranges != null and ranges != ''">
            AND
            <foreach collection="ranges" item="item" open="(" separator="and" close=")">
                ${item.column} <![CDATA[ >= ]]> #{item.from} and ${item.column} <![CDATA[ < ]]> #{item.to}
            </foreach>
        </if>
        AND is_delete = 0
    </trim>
</sql>


<insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="com.sfebiz.supplychain.persistence.base.stockout.domain.StockoutOrderTaskDO">
    insert into sc_stockout_order_task
    (
        <include refid="stockoutOrderTaskDO_sqlForInsert"/>
        ,is_delete
    )
    values
    (
        <include refid="stockoutOrderTaskDO_columnsForInsert"/>
        ,0
    )
</insert>

<update id="update" parameterType="com.sfebiz.supplychain.persistence.base.stockout.domain.StockoutOrderTaskDO">
    update sc_stockout_order_task
    <include refid="stockoutOrderTaskDO_setterForUpdate" />
    where id = #{id}
    and is_delete = 0
</update>


<update id="updateByQuery" parameterType="com.sfebiz.supplychain.persistence.base.stockout.domain.StockoutOrderTaskDO">
    update sc_stockout_order_task
    <set>
        gmt_modified = now(),
        <if test="update.stockoutOrderState != null">
            stockout_order_state = #{update.stockoutOrderState},
        </if>
        <if test="update.stockoutOrderId != null">
            stockout_order_id = #{update.stockoutOrderId},
        </if>
        <if test="update.subTaskType != null">
            sub_task_type = #{update.subTaskType},
        </if>
        <if test="update.taskOperator != null">
            task_operator = #{update.taskOperator},
        </if>
        <if test="update.retryExcuteTime != null">
            retry_excute_time = #{update.retryExcuteTime},
        </if>
        <if test="update.taskDesc != null">
            task_desc = #{update.taskDesc},
        </if>
        <if test="update.bizId != null">
            biz_id = #{update.bizId},
        </if>
        <if test="update.taskOwner != null">
            task_owner = #{update.taskOwner},
        </if>
        <if test="update.taskMemo != null">
            task_memo = #{update.taskMemo},
        </if>
        <if test="update.features != null">
            features = #{update.features},
        </if>
        <if test="update.merchantId != null">
            merchant_id = #{update.merchantId},
        </if>
        <if test="update.retryTimes != null">
            retry_times = #{update.retryTimes},
        </if>
        <if test="update.taskType != null">
            task_type = #{update.taskType},
        </if>
        <if test="update.taskState != null">
            task_state = #{update.taskState},
        </if>
    </set>
    <include refid="stockoutOrderTaskDO_query_segment"/>
</update>


<insert id="insertOrUpdate" useGeneratedKeys="true" keyProperty="id" parameterType="com.sfebiz.supplychain.persistence.base.stockout.domain.StockoutOrderTaskDO">
    insert into sc_stockout_order_task
    (
        <include refid="stockoutOrderTaskDO_sqlForInsert"/>
        ,is_delete
    )
    values
    (
        <include refid="stockoutOrderTaskDO_columnsForInsert"/>
        ,0
    )
    on duplicate key update
    gmt_modified = now()
    ,is_delete = 0
    <if test="stockoutOrderState != null">
        ,stockout_order_state = #{stockoutOrderState}
    </if>
    <if test="stockoutOrderId != null">
        ,stockout_order_id = #{stockoutOrderId}
    </if>
    <if test="subTaskType != null">
        ,sub_task_type = #{subTaskType}
    </if>
    <if test="taskOperator != null">
        ,task_operator = #{taskOperator}
    </if>
    <if test="retryExcuteTime != null">
        ,retry_excute_time = #{retryExcuteTime}
    </if>
    <if test="taskDesc != null">
        ,task_desc = #{taskDesc}
    </if>
    <if test="bizId != null">
        ,biz_id = #{bizId}
    </if>
    <if test="taskOwner != null">
        ,task_owner = #{taskOwner}
    </if>
    <if test="taskMemo != null">
        ,task_memo = #{taskMemo}
    </if>
    <if test="features != null">
        ,features = #{features}
    </if>
    <if test="merchantId != null">
        ,merchant_id = #{merchantId}
    </if>
    <if test="retryTimes != null">
        ,retry_times = #{retryTimes}
    </if>
    <if test="taskType != null">
        ,task_type = #{taskType}
    </if>
    <if test="taskState != null">
        ,task_state = #{taskState}
    </if>
</insert>

<!-- Delete -->
<update id="delete">
    update sc_stockout_order_task
    set is_delete = 1, gmt_modified = now()
    <include refid="stockoutOrderTaskDO_query_segment"/>
</update>
<update id="deleteById">
    update sc_stockout_order_task
    set is_delete = 1, gmt_modified = now()
    where id = #{id}
</update>





<!-- query class -->
<sql id="stockoutOrderTaskDO_groupBy">
    <if test="groupBys != null and groupBys != ''">
        group by
        <foreach collection="groupBys" item="item" open="" separator="," close="">
            #{item}
        </foreach>
    </if>
</sql>

<sql id="stockoutOrderTaskDO_orderby">
    <if test="orderBys != null and orderBys != ''">
        order by
        <foreach collection="orderBys" item="item" open="" separator="," close="">
            ${item.column} ${item.direction}
        </foreach>
    </if>
</sql>


<select id="query" resultMap="stockoutOrderTaskDOResult" parameterType="com.sfebiz.supplychain.persistence.base.stockout.domain.StockoutOrderTaskDO">
    <include refid="stockoutOrderTaskDO_selector"/>
    <include refid="stockoutOrderTaskDO_query_segment"/>
    <include refid="stockoutOrderTaskDO_groupBy"/>
    <include refid="stockoutOrderTaskDO_orderby"/>
</select>

<select id="query4Page" resultMap="stockoutOrderTaskDOResult" parameterType="com.sfebiz.supplychain.persistence.base.stockout.domain.StockoutOrderTaskDO">
    <include refid="stockoutOrderTaskDO_selector"/>
    <include refid="stockoutOrderTaskDO_query_segment"/>
    <include refid="stockoutOrderTaskDO_groupBy"/>
    <include refid="stockoutOrderTaskDO_orderby"/>
    limit ${startRowForMysql}, ${pageSize}
</select>


<select id="count" resultType="java.lang.Long">
    SELECT COUNT(1) FROM sc_stockout_order_task
    <include refid="stockoutOrderTaskDO_query_segment"/>
</select>

<select id="getById" resultMap="stockoutOrderTaskDOResult">
    <include refid="stockoutOrderTaskDO_selector"/>
    where id = #{id}
    and is_delete = 0
</select>

<select id="getByIdForUpdate" resultMap="stockoutOrderTaskDOResult">
    <include refid="stockoutOrderTaskDO_selector"/>
    where id = #{id}
    and is_delete = 0
    for update
</select>

</mapper>
