<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sfebiz.supplychain.persistence.base.stockout.dao.StockoutOrderStateLogDao">

<resultMap id="stockoutOrderStateLogDOResult" type="com.sfebiz.supplychain.persistence.base.stockout.domain.StockoutOrderStateLogDO">
    <result column="alarm_duration" property="alarmDuration"/>
    <result column="stockout_order_id" property="stockoutOrderId"/>
    <result column="state_duration" property="stateDuration"/>
    <result column="remark" property="remark"/>
    <result column="event_time" property="eventTime"/>
    <result column="from_state" property="fromState"/>
    <result column="line_id" property="lineId"/>
    <result column="to_state" property="toState"/>
    <result column="to_time" property="toTime"/>
    <result column="alarm_time" property="alarmTime"/>
    <result column="from_time" property="fromTime"/>
    <result column="biz_id" property="bizId"/>
    <result column="id" property="id"/>
    <result column="gmt_modified" property="gmtModified"/>
    <result column="gmt_create" property="gmtCreate"/>
</resultMap>

<sql id="stockoutOrderStateLogDO_columns">
    alarm_duration,
    stockout_order_id,
    state_duration,
    remark,
    event_time,
    from_state,
    line_id,
    to_state,
    to_time,
    alarm_time,
    from_time,
    biz_id,
    id,
    gmt_modified,
    gmt_create
</sql>

<sql id="stockoutOrderStateLogDO_sqlForInsert">
    alarm_duration,
    stockout_order_id,
    state_duration,
    remark,
    event_time,
    from_state,
    line_id,
    to_state,
    to_time,
    alarm_time,
    from_time,
    biz_id,
    id,
    gmt_modified,
    gmt_create
</sql>

<sql id="stockoutOrderStateLogDO_columnsForInsert">
    #{alarmDuration},
    #{stockoutOrderId},
    #{stateDuration},
    #{remark},
    #{eventTime},
    #{fromState},
    #{lineId},
    #{toState},
    #{toTime},
    #{alarmTime},
    #{fromTime},
    #{bizId},
    #{id},
    now(),
    now()
</sql>

<sql id="stockoutOrderStateLogDO_setterForUpdate">
    <set>
        gmt_modified = now(),
        <if test="alarmDuration != null">
            alarm_duration = #{alarmDuration},
        </if>
        <if test="stockoutOrderId != null">
            stockout_order_id = #{stockoutOrderId},
        </if>
        <if test="stateDuration != null">
            state_duration = #{stateDuration},
        </if>
        <if test="remark != null">
            remark = #{remark},
        </if>
        <if test="eventTime != null">
            event_time = #{eventTime},
        </if>
        <if test="fromState != null">
            from_state = #{fromState},
        </if>
        <if test="lineId != null">
            line_id = #{lineId},
        </if>
        <if test="toState != null">
            to_state = #{toState},
        </if>
        <if test="toTime != null">
            to_time = #{toTime},
        </if>
        <if test="alarmTime != null">
            alarm_time = #{alarmTime},
        </if>
        <if test="fromTime != null">
            from_time = #{fromTime},
        </if>
        <if test="bizId != null">
            biz_id = #{bizId},
        </if>
    </set>
</sql>

<sql id="stockoutOrderStateLogDO_selector">
    select
    <include refid="stockoutOrderStateLogDO_columns"/>
    from sc_stockout_order_state_log
</sql>

<sql id="stockoutOrderStateLogDO_query_segment">
    <trim prefix="WHERE" prefixOverrides="AND|OR">
        <if test="data.alarmDuration != null">
            AND alarm_duration = #{data.alarmDuration}
        </if>
        <if test="data.stockoutOrderId != null">
            AND stockout_order_id = #{data.stockoutOrderId}
        </if>
        <if test="data.stateDuration != null">
            AND state_duration = #{data.stateDuration}
        </if>
        <if test="data.remark != null">
            AND remark = #{data.remark}
        </if>
        <if test="data.eventTime != null">
            AND event_time = #{data.eventTime}
        </if>
        <if test="data.fromState != null">
            AND from_state = #{data.fromState}
        </if>
        <if test="data.lineId != null">
            AND line_id = #{data.lineId}
        </if>
        <if test="data.toState != null">
            AND to_state = #{data.toState}
        </if>
        <if test="data.toTime != null">
            AND to_time = #{data.toTime}
        </if>
        <if test="data.alarmTime != null">
            AND alarm_time = #{data.alarmTime}
        </if>
        <if test="data.fromTime != null">
            AND from_time = #{data.fromTime}
        </if>
        <if test="data.bizId != null">
            AND biz_id = #{data.bizId}
        </if>
        <if test="data.id != null">
            AND id = #{data.id}
        </if>
        <if test="data.gmtModified != null">
            AND gmt_modified = #{data.gmtModified}
        </if>
        <if test="data.gmtCreate != null">
            AND gmt_create = #{data.gmtCreate}
        </if>
        <if test="ins != null and ins != ''">
            AND
            <foreach collection="ins" item="item" open="(" separator="and" close=")">
                ${item.column} in
                <foreach collection="item.values" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </foreach>
        </if>
        <if test="notIns != null and notIns != ''">
            AND
            <foreach collection="notIns" item="item" open="(" separator="and" close=")">
                ${item.column} not in
                <foreach collection="item.values" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </foreach>
        </if>
        <if test="equals != null and equals != ''">
            AND
            <foreach collection="equals" item="item" open="(" separator="and" close=")">
                ${item.column} = #{item.value}
            </foreach>
        </if>
        <if test="notEquals != null and notEquals != ''">
            AND
            <foreach collection="notEquals" item="item" open="(" separator="and" close=")">
                ${item.column} = #{item.value}
            </foreach>
        </if>
        <if test="lts != null and lts != ''">
            AND
            <foreach collection="lts" item="item" open="(" separator="and" close=")">
                ${item.column} <![CDATA[ < ]]> #{item.value}
            </foreach>
        </if>
        <if test="gts != null and gts != ''">
            AND
            <foreach collection="gts" item="item" open="(" separator="and" close=")">
                ${item.column} <![CDATA[ > ]]> #{item.value}
            </foreach>
        </if>
        <if test="likes != null and likes != ''">
            AND
            <foreach collection="likes" item="item" open="(" separator="and" close=")">
                ${item.column} like concat('%', #{item.value}, '%')
            </foreach>
        </if>
        <if test="ltes != null and ltes != ''">
            AND
            <foreach collection="ltes" item="item" open="(" separator="and" close=")">
                ${item.column} <![CDATA[ <= ]]> #{item.value}
            </foreach>
        </if>
        <if test="gtes != null and gtes != ''">
            AND
            <foreach collection="gtes" item="item" open="(" separator="and" close=")">
                ${item.column} <![CDATA[ >= ]]> #{item.value}
            </foreach>
        </if>
        <if test="ranges != null and ranges != ''">
            AND
            <foreach collection="ranges" item="item" open="(" separator="and" close=")">
                ${item.column} <![CDATA[ >= ]]> #{item.from} and ${item.column} <![CDATA[ < ]]> #{item.to}
            </foreach>
        </if>
        AND is_delete = 0
    </trim>
</sql>


<insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="com.sfebiz.supplychain.persistence.base.stockout.domain.StockoutOrderStateLogDO">
    insert into sc_stockout_order_state_log
    (
        <include refid="stockoutOrderStateLogDO_sqlForInsert"/>
        ,is_delete
    )
    values
    (
        <include refid="stockoutOrderStateLogDO_columnsForInsert"/>
        ,0
    )
</insert>

<update id="update" parameterType="com.sfebiz.supplychain.persistence.base.stockout.domain.StockoutOrderStateLogDO">
    update sc_stockout_order_state_log
    <include refid="stockoutOrderStateLogDO_setterForUpdate" />
    where id = #{id}
    and is_delete = 0
</update>


<update id="updateByQuery" parameterType="com.sfebiz.supplychain.persistence.base.stockout.domain.StockoutOrderStateLogDO">
    update sc_stockout_order_state_log
    <set>
        gmt_modified = now(),
        <if test="update.alarmDuration != null">
            alarm_duration = #{update.alarmDuration},
        </if>
        <if test="update.stockoutOrderId != null">
            stockout_order_id = #{update.stockoutOrderId},
        </if>
        <if test="update.stateDuration != null">
            state_duration = #{update.stateDuration},
        </if>
        <if test="update.remark != null">
            remark = #{update.remark},
        </if>
        <if test="update.eventTime != null">
            event_time = #{update.eventTime},
        </if>
        <if test="update.fromState != null">
            from_state = #{update.fromState},
        </if>
        <if test="update.lineId != null">
            line_id = #{update.lineId},
        </if>
        <if test="update.toState != null">
            to_state = #{update.toState},
        </if>
        <if test="update.toTime != null">
            to_time = #{update.toTime},
        </if>
        <if test="update.alarmTime != null">
            alarm_time = #{update.alarmTime},
        </if>
        <if test="update.fromTime != null">
            from_time = #{update.fromTime},
        </if>
        <if test="update.bizId != null">
            biz_id = #{update.bizId},
        </if>
    </set>
    <include refid="stockoutOrderStateLogDO_query_segment"/>
</update>


<insert id="insertOrUpdate" useGeneratedKeys="true" keyProperty="id" parameterType="com.sfebiz.supplychain.persistence.base.stockout.domain.StockoutOrderStateLogDO">
    insert into sc_stockout_order_state_log
    (
        <include refid="stockoutOrderStateLogDO_sqlForInsert"/>
        ,is_delete
    )
    values
    (
        <include refid="stockoutOrderStateLogDO_columnsForInsert"/>
        ,0
    )
    on duplicate key update
    gmt_modified = now()
    ,is_delete = 0
    <if test="alarmDuration != null">
        ,alarm_duration = #{alarmDuration}
    </if>
    <if test="stockoutOrderId != null">
        ,stockout_order_id = #{stockoutOrderId}
    </if>
    <if test="stateDuration != null">
        ,state_duration = #{stateDuration}
    </if>
    <if test="remark != null">
        ,remark = #{remark}
    </if>
    <if test="eventTime != null">
        ,event_time = #{eventTime}
    </if>
    <if test="fromState != null">
        ,from_state = #{fromState}
    </if>
    <if test="lineId != null">
        ,line_id = #{lineId}
    </if>
    <if test="toState != null">
        ,to_state = #{toState}
    </if>
    <if test="toTime != null">
        ,to_time = #{toTime}
    </if>
    <if test="alarmTime != null">
        ,alarm_time = #{alarmTime}
    </if>
    <if test="fromTime != null">
        ,from_time = #{fromTime}
    </if>
    <if test="bizId != null">
        ,biz_id = #{bizId}
    </if>
</insert>

<!-- Delete -->
<update id="delete">
    update sc_stockout_order_state_log
    set is_delete = 1, gmt_modified = now()
    <include refid="stockoutOrderStateLogDO_query_segment"/>
</update>
<update id="deleteById">
    update sc_stockout_order_state_log
    set is_delete = 1, gmt_modified = now()
    where id = #{id}
</update>





<!-- query class -->
<sql id="stockoutOrderStateLogDO_groupBy">
    <if test="groupBys != null and groupBys != ''">
        group by
        <foreach collection="groupBys" item="item" open="" separator="," close="">
            #{item}
        </foreach>
    </if>
</sql>

<sql id="stockoutOrderStateLogDO_orderby">
    <if test="orderBys != null and orderBys != ''">
        order by
        <foreach collection="orderBys" item="item" open="" separator="," close="">
            ${item.column} ${item.direction}
        </foreach>
    </if>
</sql>


<select id="query" resultMap="stockoutOrderStateLogDOResult" parameterType="com.sfebiz.supplychain.persistence.base.stockout.domain.StockoutOrderStateLogDO">
    <include refid="stockoutOrderStateLogDO_selector"/>
    <include refid="stockoutOrderStateLogDO_query_segment"/>
    <include refid="stockoutOrderStateLogDO_groupBy"/>
    <include refid="stockoutOrderStateLogDO_orderby"/>
</select>

<select id="query4Page" resultMap="stockoutOrderStateLogDOResult" parameterType="com.sfebiz.supplychain.persistence.base.stockout.domain.StockoutOrderStateLogDO">
    <include refid="stockoutOrderStateLogDO_selector"/>
    <include refid="stockoutOrderStateLogDO_query_segment"/>
    <include refid="stockoutOrderStateLogDO_groupBy"/>
    <include refid="stockoutOrderStateLogDO_orderby"/>
    limit ${startRowForMysql}, ${pageSize}
</select>


<select id="count" resultType="java.lang.Long">
    SELECT COUNT(1) FROM sc_stockout_order_state_log
    <include refid="stockoutOrderStateLogDO_query_segment"/>
</select>

<select id="getById" resultMap="stockoutOrderStateLogDOResult">
    <include refid="stockoutOrderStateLogDO_selector"/>
    where id = #{id}
    and is_delete = 0
</select>

<select id="getByIdForUpdate" resultMap="stockoutOrderStateLogDOResult">
    <include refid="stockoutOrderStateLogDO_selector"/>
    where id = #{id}
    and is_delete = 0
    for update
</select>

</mapper>
