<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sfebiz.supplychain.persistence.base.stockout.dao.StockoutOrderInvokeLogDao">

<resultMap id="stockoutOrderInvokeLogDOResult" type="com.sfebiz.supplychain.persistence.base.stockout.domain.StockoutOrderInvokeLogDO">
    <result column="merchant_order_no" property="merchantOrderNo"/>
    <result column="merchant_account_id" property="merchantAccountId"/>
    <result column="biz_id" property="bizId"/>
    <result column="action_desc" property="actionDesc"/>
    <result column="req_info" property="reqInfo"/>
    <result column="err_code" property="errCode"/>
    <result column="err_desc" property="errDesc"/>
    <result column="gmt_invoke" property="gmtInvoke"/>
    <result column="action_type" property="actionType"/>
    <result column="id" property="id"/>
    <result column="gmt_modified" property="gmtModified"/>
    <result column="gmt_create" property="gmtCreate"/>
</resultMap>

<sql id="stockoutOrderInvokeLogDO_columns">
    merchant_order_no,
    merchant_account_id,
    biz_id,
    action_desc,
    req_info,
    err_code,
    err_desc,
    gmt_invoke,
    action_type,
    id,
    gmt_modified,
    gmt_create
</sql>

<sql id="stockoutOrderInvokeLogDO_sqlForInsert">
    merchant_order_no,
    merchant_account_id,
    biz_id,
    action_desc,
    req_info,
    err_code,
    err_desc,
    gmt_invoke,
    action_type,
    id,
    gmt_modified,
    gmt_create
</sql>

<sql id="stockoutOrderInvokeLogDO_columnsForInsert">
    #{merchantOrderNo},
    #{merchantAccountId},
    #{bizId},
    #{actionDesc},
    #{reqInfo},
    #{errCode},
    #{errDesc},
    #{gmtInvoke},
    #{actionType},
    #{id},
    now(),
    now()
</sql>

<sql id="stockoutOrderInvokeLogDO_setterForUpdate">
    <set>
        gmt_modified = now(),
        <if test="merchantOrderNo != null">
            merchant_order_no = #{merchantOrderNo},
        </if>
        <if test="merchantAccountId != null">
            merchant_account_id = #{merchantAccountId},
        </if>
        <if test="bizId != null">
            biz_id = #{bizId},
        </if>
        <if test="actionDesc != null">
            action_desc = #{actionDesc},
        </if>
        <if test="reqInfo != null">
            req_info = #{reqInfo},
        </if>
        <if test="errCode != null">
            err_code = #{errCode},
        </if>
        <if test="errDesc != null">
            err_desc = #{errDesc},
        </if>
        <if test="gmtInvoke != null">
            gmt_invoke = #{gmtInvoke},
        </if>
        <if test="actionType != null">
            action_type = #{actionType},
        </if>
    </set>
</sql>

<sql id="stockoutOrderInvokeLogDO_selector">
    select
    <include refid="stockoutOrderInvokeLogDO_columns"/>
    from sc_stockout_order_invoke_log
</sql>

<sql id="stockoutOrderInvokeLogDO_query_segment">
    <trim prefix="WHERE" prefixOverrides="AND|OR">
        <if test="data.merchantOrderNo != null">
            AND merchant_order_no = #{data.merchantOrderNo}
        </if>
        <if test="data.merchantAccountId != null">
            AND merchant_account_id = #{data.merchantAccountId}
        </if>
        <if test="data.bizId != null">
            AND biz_id = #{data.bizId}
        </if>
        <if test="data.actionDesc != null">
            AND action_desc = #{data.actionDesc}
        </if>
        <if test="data.reqInfo != null">
            AND req_info = #{data.reqInfo}
        </if>
        <if test="data.errCode != null">
            AND err_code = #{data.errCode}
        </if>
        <if test="data.errDesc != null">
            AND err_desc = #{data.errDesc}
        </if>
        <if test="data.gmtInvoke != null">
            AND gmt_invoke = #{data.gmtInvoke}
        </if>
        <if test="data.actionType != null">
            AND action_type = #{data.actionType}
        </if>
        <if test="data.id != null">
            AND id = #{data.id}
        </if>
        <if test="data.gmtModified != null">
            AND gmt_modified = #{data.gmtModified}
        </if>
        <if test="data.gmtCreate != null">
            AND gmt_create = #{data.gmtCreate}
        </if>
        <if test="ins != null and ins != ''">
            AND
            <foreach collection="ins" item="item" open="(" separator="and" close=")">
                ${item.column} in
                <foreach collection="item.values" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </foreach>
        </if>
        <if test="notIns != null and notIns != ''">
            AND
            <foreach collection="notIns" item="item" open="(" separator="and" close=")">
                ${item.column} not in
                <foreach collection="item.values" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </foreach>
        </if>
        <if test="equals != null and equals != ''">
            AND
            <foreach collection="equals" item="item" open="(" separator="and" close=")">
                ${item.column} = #{item.value}
            </foreach>
        </if>
        <if test="notEquals != null and notEquals != ''">
            AND
            <foreach collection="notEquals" item="item" open="(" separator="and" close=")">
                ${item.column} = #{item.value}
            </foreach>
        </if>
        <if test="lts != null and lts != ''">
            AND
            <foreach collection="lts" item="item" open="(" separator="and" close=")">
                ${item.column} <![CDATA[ < ]]> #{item.value}
            </foreach>
        </if>
        <if test="gts != null and gts != ''">
            AND
            <foreach collection="gts" item="item" open="(" separator="and" close=")">
                ${item.column} <![CDATA[ > ]]> #{item.value}
            </foreach>
        </if>
        <if test="likes != null and likes != ''">
            AND
            <foreach collection="likes" item="item" open="(" separator="and" close=")">
                ${item.column} like concat('%', #{item.value}, '%')
            </foreach>
        </if>
        <if test="ltes != null and ltes != ''">
            AND
            <foreach collection="ltes" item="item" open="(" separator="and" close=")">
                ${item.column} <![CDATA[ <= ]]> #{item.value}
            </foreach>
        </if>
        <if test="gtes != null and gtes != ''">
            AND
            <foreach collection="gtes" item="item" open="(" separator="and" close=")">
                ${item.column} <![CDATA[ >= ]]> #{item.value}
            </foreach>
        </if>
        <if test="ranges != null and ranges != ''">
            AND
            <foreach collection="ranges" item="item" open="(" separator="and" close=")">
                ${item.column} <![CDATA[ >= ]]> #{item.from} and ${item.column} <![CDATA[ < ]]> #{item.to}
            </foreach>
        </if>
        AND is_delete = 0
    </trim>
</sql>


<insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="com.sfebiz.supplychain.persistence.base.stockout.domain.StockoutOrderInvokeLogDO">
    insert into sc_stockout_order_invoke_log
    (
        <include refid="stockoutOrderInvokeLogDO_sqlForInsert"/>
        ,is_delete
    )
    values
    (
        <include refid="stockoutOrderInvokeLogDO_columnsForInsert"/>
        ,0
    )
</insert>

<update id="update" parameterType="com.sfebiz.supplychain.persistence.base.stockout.domain.StockoutOrderInvokeLogDO">
    update sc_stockout_order_invoke_log
    <include refid="stockoutOrderInvokeLogDO_setterForUpdate" />
    where id = #{id}
    and is_delete = 0
</update>


<update id="updateByQuery" parameterType="com.sfebiz.supplychain.persistence.base.stockout.domain.StockoutOrderInvokeLogDO">
    update sc_stockout_order_invoke_log
    <set>
        gmt_modified = now(),
        <if test="update.merchantOrderNo != null">
            merchant_order_no = #{update.merchantOrderNo},
        </if>
        <if test="update.merchantAccountId != null">
            merchant_account_id = #{update.merchantAccountId},
        </if>
        <if test="update.bizId != null">
            biz_id = #{update.bizId},
        </if>
        <if test="update.actionDesc != null">
            action_desc = #{update.actionDesc},
        </if>
        <if test="update.reqInfo != null">
            req_info = #{update.reqInfo},
        </if>
        <if test="update.errCode != null">
            err_code = #{update.errCode},
        </if>
        <if test="update.errDesc != null">
            err_desc = #{update.errDesc},
        </if>
        <if test="update.gmtInvoke != null">
            gmt_invoke = #{update.gmtInvoke},
        </if>
        <if test="update.actionType != null">
            action_type = #{update.actionType},
        </if>
    </set>
    <include refid="stockoutOrderInvokeLogDO_query_segment"/>
</update>


<insert id="insertOrUpdate" useGeneratedKeys="true" keyProperty="id" parameterType="com.sfebiz.supplychain.persistence.base.stockout.domain.StockoutOrderInvokeLogDO">
    insert into sc_stockout_order_invoke_log
    (
        <include refid="stockoutOrderInvokeLogDO_sqlForInsert"/>
        ,is_delete
    )
    values
    (
        <include refid="stockoutOrderInvokeLogDO_columnsForInsert"/>
        ,0
    )
    on duplicate key update
    gmt_modified = now()
    ,is_delete = 0
    <if test="merchantOrderNo != null">
        ,merchant_order_no = #{merchantOrderNo}
    </if>
    <if test="merchantAccountId != null">
        ,merchant_account_id = #{merchantAccountId}
    </if>
    <if test="bizId != null">
        ,biz_id = #{bizId}
    </if>
    <if test="actionDesc != null">
        ,action_desc = #{actionDesc}
    </if>
    <if test="reqInfo != null">
        ,req_info = #{reqInfo}
    </if>
    <if test="errCode != null">
        ,err_code = #{errCode}
    </if>
    <if test="errDesc != null">
        ,err_desc = #{errDesc}
    </if>
    <if test="gmtInvoke != null">
        ,gmt_invoke = #{gmtInvoke}
    </if>
    <if test="actionType != null">
        ,action_type = #{actionType}
    </if>
</insert>

<!-- Delete -->
<update id="delete">
    update sc_stockout_order_invoke_log
    set is_delete = 1, gmt_modified = now()
    <include refid="stockoutOrderInvokeLogDO_query_segment"/>
</update>
<update id="deleteById">
    update sc_stockout_order_invoke_log
    set is_delete = 1, gmt_modified = now()
    where id = #{id}
</update>





<!-- query class -->
<sql id="stockoutOrderInvokeLogDO_groupBy">
    <if test="groupBys != null and groupBys != ''">
        group by
        <foreach collection="groupBys" item="item" open="" separator="," close="">
            #{item}
        </foreach>
    </if>
</sql>

<sql id="stockoutOrderInvokeLogDO_orderby">
    <if test="orderBys != null and orderBys != ''">
        order by
        <foreach collection="orderBys" item="item" open="" separator="," close="">
            ${item.column} ${item.direction}
        </foreach>
    </if>
</sql>


<select id="query" resultMap="stockoutOrderInvokeLogDOResult" parameterType="com.sfebiz.supplychain.persistence.base.stockout.domain.StockoutOrderInvokeLogDO">
    <include refid="stockoutOrderInvokeLogDO_selector"/>
    <include refid="stockoutOrderInvokeLogDO_query_segment"/>
    <include refid="stockoutOrderInvokeLogDO_groupBy"/>
    <include refid="stockoutOrderInvokeLogDO_orderby"/>
</select>

<select id="query4Page" resultMap="stockoutOrderInvokeLogDOResult" parameterType="com.sfebiz.supplychain.persistence.base.stockout.domain.StockoutOrderInvokeLogDO">
    <include refid="stockoutOrderInvokeLogDO_selector"/>
    <include refid="stockoutOrderInvokeLogDO_query_segment"/>
    <include refid="stockoutOrderInvokeLogDO_groupBy"/>
    <include refid="stockoutOrderInvokeLogDO_orderby"/>
    limit ${startRowForMysql}, ${pageSize}
</select>


<select id="count" resultType="java.lang.Long">
    SELECT COUNT(1) FROM sc_stockout_order_invoke_log
    <include refid="stockoutOrderInvokeLogDO_query_segment"/>
</select>

<select id="getById" resultMap="stockoutOrderInvokeLogDOResult">
    <include refid="stockoutOrderInvokeLogDO_selector"/>
    where id = #{id}
    and is_delete = 0
</select>

<select id="getByIdForUpdate" resultMap="stockoutOrderInvokeLogDOResult">
    <include refid="stockoutOrderInvokeLogDO_selector"/>
    where id = #{id}
    and is_delete = 0
    for update
</select>

</mapper>
