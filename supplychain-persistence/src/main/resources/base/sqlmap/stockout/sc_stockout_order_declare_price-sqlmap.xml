<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sfebiz.supplychain.persistence.base.stockout.dao.StockoutOrderDeclarePriceDao">

<resultMap id="stockoutOrderDeclarePriceDOResult" type="com.sfebiz.supplychain.persistence.base.stockout.domain.StockoutOrderDeclarePriceDO">
    <result column="order_actual_price" property="orderActualPrice"/>
    <result column="order_total_price" property="orderTotalPrice"/>
    <result column="goods_total_price" property="goodsTotalPrice"/>
    <result column="discount_total_price" property="discountTotalPrice"/>
    <result column="stockout_order_id" property="stockoutOrderId"/>
    <result column="declare_total_price" property="declareTotalPrice"/>
    <result column="tax_fee" property="taxFee"/>
    <result column="freight_fee" property="freightFee"/>
    <result column="is_pay_tax" property="isPayTax"/>
    <result column="tariff_fee" property="tariffFee"/>
    <result column="biz_id" property="bizId"/>
    <result column="memo" property="memo"/>
    <result column="consumption_duty_tax" property="consumptionDutyTax"/>
    <result column="added_value_tax" property="addedValueTax"/>
    <result column="insurance_fee" property="insuranceFee"/>
    <result column="id" property="id"/>
    <result column="gmt_create" property="gmtCreate"/>
    <result column="gmt_modified" property="gmtModified"/>
</resultMap>

<sql id="stockoutOrderDeclarePriceDO_columns">
    order_actual_price,
    order_total_price,
    goods_total_price,
    discount_total_price,
    stockout_order_id,
    declare_total_price,
    tax_fee,
    freight_fee,
    is_pay_tax,
    tariff_fee,
    biz_id,
    memo,
    consumption_duty_tax,
    added_value_tax,
    insurance_fee,
    id,
    gmt_create,
    gmt_modified
</sql>

<sql id="stockoutOrderDeclarePriceDO_sqlForInsert">
    order_actual_price,
    order_total_price,
    goods_total_price,
    discount_total_price,
    stockout_order_id,
    declare_total_price,
    tax_fee,
    freight_fee,
    is_pay_tax,
    tariff_fee,
    biz_id,
    memo,
    consumption_duty_tax,
    added_value_tax,
    insurance_fee,
    id,
    gmt_create,
    gmt_modified
</sql>

<sql id="stockoutOrderDeclarePriceDO_columnsForInsert">
    #{orderActualPrice},
    #{orderTotalPrice},
    #{goodsTotalPrice},
    #{discountTotalPrice},
    #{stockoutOrderId},
    #{declareTotalPrice},
    #{taxFee},
    #{freightFee},
    #{isPayTax},
    #{tariffFee},
    #{bizId},
    #{memo},
    #{consumptionDutyTax},
    #{addedValueTax},
    #{insuranceFee},
    #{id},
    now(),
    now()
</sql>

<sql id="stockoutOrderDeclarePriceDO_setterForUpdate">
    <set>
        gmt_modified = now(),
        <if test="orderActualPrice != null">
            order_actual_price = #{orderActualPrice},
        </if>
        <if test="orderTotalPrice != null">
            order_total_price = #{orderTotalPrice},
        </if>
        <if test="goodsTotalPrice != null">
            goods_total_price = #{goodsTotalPrice},
        </if>
        <if test="discountTotalPrice != null">
            discount_total_price = #{discountTotalPrice},
        </if>
        <if test="stockoutOrderId != null">
            stockout_order_id = #{stockoutOrderId},
        </if>
        <if test="declareTotalPrice != null">
            declare_total_price = #{declareTotalPrice},
        </if>
        <if test="taxFee != null">
            tax_fee = #{taxFee},
        </if>
        <if test="freightFee != null">
            freight_fee = #{freightFee},
        </if>
        <if test="isPayTax != null">
            is_pay_tax = #{isPayTax},
        </if>
        <if test="tariffFee != null">
            tariff_fee = #{tariffFee},
        </if>
        <if test="bizId != null">
            biz_id = #{bizId},
        </if>
        <if test="memo != null">
            memo = #{memo},
        </if>
        <if test="consumptionDutyTax != null">
            consumption_duty_tax = #{consumptionDutyTax},
        </if>
        <if test="addedValueTax != null">
            added_value_tax = #{addedValueTax},
        </if>
        <if test="insuranceFee != null">
            insurance_fee = #{insuranceFee},
        </if>
    </set>
</sql>

<sql id="stockoutOrderDeclarePriceDO_selector">
    select
    <include refid="stockoutOrderDeclarePriceDO_columns"/>
    from sc_stockout_order_declare_price
</sql>

<sql id="stockoutOrderDeclarePriceDO_query_segment">
    <trim prefix="WHERE" prefixOverrides="AND|OR">
        <if test="data.orderActualPrice != null">
            AND order_actual_price = #{data.orderActualPrice}
        </if>
        <if test="data.orderTotalPrice != null">
            AND order_total_price = #{data.orderTotalPrice}
        </if>
        <if test="data.goodsTotalPrice != null">
            AND goods_total_price = #{data.goodsTotalPrice}
        </if>
        <if test="data.discountTotalPrice != null">
            AND discount_total_price = #{data.discountTotalPrice}
        </if>
        <if test="data.stockoutOrderId != null">
            AND stockout_order_id = #{data.stockoutOrderId}
        </if>
        <if test="data.declareTotalPrice != null">
            AND declare_total_price = #{data.declareTotalPrice}
        </if>
        <if test="data.taxFee != null">
            AND tax_fee = #{data.taxFee}
        </if>
        <if test="data.freightFee != null">
            AND freight_fee = #{data.freightFee}
        </if>
        <if test="data.isPayTax != null">
            AND is_pay_tax = #{data.isPayTax}
        </if>
        <if test="data.tariffFee != null">
            AND tariff_fee = #{data.tariffFee}
        </if>
        <if test="data.bizId != null">
            AND biz_id = #{data.bizId}
        </if>
        <if test="data.memo != null">
            AND memo = #{data.memo}
        </if>
        <if test="data.consumptionDutyTax != null">
            AND consumption_duty_tax = #{data.consumptionDutyTax}
        </if>
        <if test="data.addedValueTax != null">
            AND added_value_tax = #{data.addedValueTax}
        </if>
        <if test="data.insuranceFee != null">
            AND insurance_fee = #{data.insuranceFee}
        </if>
        <if test="data.id != null">
            AND id = #{data.id}
        </if>
        <if test="data.gmtCreate != null">
            AND gmt_create = #{data.gmtCreate}
        </if>
        <if test="data.gmtModified != null">
            AND gmt_modified = #{data.gmtModified}
        </if>
        <if test="ins != null and ins != ''">
            AND
            <foreach collection="ins" item="item" open="(" separator="and" close=")">
                ${item.column} in
                <foreach collection="item.values" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </foreach>
        </if>
        <if test="notIns != null and notIns != ''">
            AND
            <foreach collection="notIns" item="item" open="(" separator="and" close=")">
                ${item.column} not in
                <foreach collection="item.values" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </foreach>
        </if>
        <if test="equals != null and equals != ''">
            AND
            <foreach collection="equals" item="item" open="(" separator="and" close=")">
                ${item.column} = #{item.value}
            </foreach>
        </if>
        <if test="notEquals != null and notEquals != ''">
            AND
            <foreach collection="notEquals" item="item" open="(" separator="and" close=")">
                ${item.column} = #{item.value}
            </foreach>
        </if>
        <if test="lts != null and lts != ''">
            AND
            <foreach collection="lts" item="item" open="(" separator="and" close=")">
                ${item.column} <![CDATA[ < ]]> #{item.value}
            </foreach>
        </if>
        <if test="gts != null and gts != ''">
            AND
            <foreach collection="gts" item="item" open="(" separator="and" close=")">
                ${item.column} <![CDATA[ > ]]> #{item.value}
            </foreach>
        </if>
        <if test="likes != null and likes != ''">
            AND
            <foreach collection="likes" item="item" open="(" separator="and" close=")">
                ${item.column} like concat('%', #{item.value}, '%')
            </foreach>
        </if>
        <if test="ltes != null and ltes != ''">
            AND
            <foreach collection="ltes" item="item" open="(" separator="and" close=")">
                ${item.column} <![CDATA[ <= ]]> #{item.value}
            </foreach>
        </if>
        <if test="gtes != null and gtes != ''">
            AND
            <foreach collection="gtes" item="item" open="(" separator="and" close=")">
                ${item.column} <![CDATA[ >= ]]> #{item.value}
            </foreach>
        </if>
        <if test="ranges != null and ranges != ''">
            AND
            <foreach collection="ranges" item="item" open="(" separator="and" close=")">
                ${item.column} <![CDATA[ >= ]]> #{item.from} and ${item.column} <![CDATA[ < ]]> #{item.to}
            </foreach>
        </if>
        AND is_delete = 0
    </trim>
</sql>


<insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="com.sfebiz.supplychain.persistence.base.stockout.domain.StockoutOrderDeclarePriceDO">
    insert into sc_stockout_order_declare_price
    (
        <include refid="stockoutOrderDeclarePriceDO_sqlForInsert"/>
        ,is_delete
    )
    values
    (
        <include refid="stockoutOrderDeclarePriceDO_columnsForInsert"/>
        ,0
    )
</insert>

<update id="update" parameterType="com.sfebiz.supplychain.persistence.base.stockout.domain.StockoutOrderDeclarePriceDO">
    update sc_stockout_order_declare_price
    <include refid="stockoutOrderDeclarePriceDO_setterForUpdate" />
    where id = #{id}
    and is_delete = 0
</update>


<update id="updateByQuery" parameterType="com.sfebiz.supplychain.persistence.base.stockout.domain.StockoutOrderDeclarePriceDO">
    update sc_stockout_order_declare_price
    <set>
        gmt_modified = now(),
        <if test="update.orderActualPrice != null">
            order_actual_price = #{update.orderActualPrice},
        </if>
        <if test="update.orderTotalPrice != null">
            order_total_price = #{update.orderTotalPrice},
        </if>
        <if test="update.goodsTotalPrice != null">
            goods_total_price = #{update.goodsTotalPrice},
        </if>
        <if test="update.discountTotalPrice != null">
            discount_total_price = #{update.discountTotalPrice},
        </if>
        <if test="update.stockoutOrderId != null">
            stockout_order_id = #{update.stockoutOrderId},
        </if>
        <if test="update.declareTotalPrice != null">
            declare_total_price = #{update.declareTotalPrice},
        </if>
        <if test="update.taxFee != null">
            tax_fee = #{update.taxFee},
        </if>
        <if test="update.freightFee != null">
            freight_fee = #{update.freightFee},
        </if>
        <if test="update.isPayTax != null">
            is_pay_tax = #{update.isPayTax},
        </if>
        <if test="update.tariffFee != null">
            tariff_fee = #{update.tariffFee},
        </if>
        <if test="update.bizId != null">
            biz_id = #{update.bizId},
        </if>
        <if test="update.memo != null">
            memo = #{update.memo},
        </if>
        <if test="update.consumptionDutyTax != null">
            consumption_duty_tax = #{update.consumptionDutyTax},
        </if>
        <if test="update.addedValueTax != null">
            added_value_tax = #{update.addedValueTax},
        </if>
        <if test="update.insuranceFee != null">
            insurance_fee = #{update.insuranceFee},
        </if>
    </set>
    <include refid="stockoutOrderDeclarePriceDO_query_segment"/>
</update>


<insert id="insertOrUpdate" useGeneratedKeys="true" keyProperty="id" parameterType="com.sfebiz.supplychain.persistence.base.stockout.domain.StockoutOrderDeclarePriceDO">
    insert into sc_stockout_order_declare_price
    (
        <include refid="stockoutOrderDeclarePriceDO_sqlForInsert"/>
        ,is_delete
    )
    values
    (
        <include refid="stockoutOrderDeclarePriceDO_columnsForInsert"/>
        ,0
    )
    on duplicate key update
    gmt_modified = now()
    ,is_delete = 0
    <if test="orderActualPrice != null">
        ,order_actual_price = #{orderActualPrice}
    </if>
    <if test="orderTotalPrice != null">
        ,order_total_price = #{orderTotalPrice}
    </if>
    <if test="goodsTotalPrice != null">
        ,goods_total_price = #{goodsTotalPrice}
    </if>
    <if test="discountTotalPrice != null">
        ,discount_total_price = #{discountTotalPrice}
    </if>
    <if test="stockoutOrderId != null">
        ,stockout_order_id = #{stockoutOrderId}
    </if>
    <if test="declareTotalPrice != null">
        ,declare_total_price = #{declareTotalPrice}
    </if>
    <if test="taxFee != null">
        ,tax_fee = #{taxFee}
    </if>
    <if test="freightFee != null">
        ,freight_fee = #{freightFee}
    </if>
    <if test="isPayTax != null">
        ,is_pay_tax = #{isPayTax}
    </if>
    <if test="tariffFee != null">
        ,tariff_fee = #{tariffFee}
    </if>
    <if test="bizId != null">
        ,biz_id = #{bizId}
    </if>
    <if test="memo != null">
        ,memo = #{memo}
    </if>
    <if test="consumptionDutyTax != null">
        ,consumption_duty_tax = #{consumptionDutyTax}
    </if>
    <if test="addedValueTax != null">
        ,added_value_tax = #{addedValueTax}
    </if>
    <if test="insuranceFee != null">
        ,insurance_fee = #{insuranceFee}
    </if>
</insert>

<!-- Delete -->
<update id="delete">
    update sc_stockout_order_declare_price
    set is_delete = 1, gmt_modified = now()
    <include refid="stockoutOrderDeclarePriceDO_query_segment"/>
</update>
<update id="deleteById">
    update sc_stockout_order_declare_price
    set is_delete = 1, gmt_modified = now()
    where id = #{id}
</update>





<!-- query class -->
<sql id="stockoutOrderDeclarePriceDO_groupBy">
    <if test="groupBys != null and groupBys != ''">
        group by
        <foreach collection="groupBys" item="item" open="" separator="," close="">
            #{item}
        </foreach>
    </if>
</sql>

<sql id="stockoutOrderDeclarePriceDO_orderby">
    <if test="orderBys != null and orderBys != ''">
        order by
        <foreach collection="orderBys" item="item" open="" separator="," close="">
            ${item.column} ${item.direction}
        </foreach>
    </if>
</sql>


<select id="query" resultMap="stockoutOrderDeclarePriceDOResult" parameterType="com.sfebiz.supplychain.persistence.base.stockout.domain.StockoutOrderDeclarePriceDO">
    <include refid="stockoutOrderDeclarePriceDO_selector"/>
    <include refid="stockoutOrderDeclarePriceDO_query_segment"/>
    <include refid="stockoutOrderDeclarePriceDO_groupBy"/>
    <include refid="stockoutOrderDeclarePriceDO_orderby"/>
</select>

<select id="query4Page" resultMap="stockoutOrderDeclarePriceDOResult" parameterType="com.sfebiz.supplychain.persistence.base.stockout.domain.StockoutOrderDeclarePriceDO">
    <include refid="stockoutOrderDeclarePriceDO_selector"/>
    <include refid="stockoutOrderDeclarePriceDO_query_segment"/>
    <include refid="stockoutOrderDeclarePriceDO_groupBy"/>
    <include refid="stockoutOrderDeclarePriceDO_orderby"/>
    limit ${startRowForMysql}, ${pageSize}
</select>


<select id="count" resultType="java.lang.Long">
    SELECT COUNT(1) FROM sc_stockout_order_declare_price
    <include refid="stockoutOrderDeclarePriceDO_query_segment"/>
</select>

<select id="getById" resultMap="stockoutOrderDeclarePriceDOResult">
    <include refid="stockoutOrderDeclarePriceDO_selector"/>
    where id = #{id}
    and is_delete = 0
</select>

<select id="getByIdForUpdate" resultMap="stockoutOrderDeclarePriceDOResult">
    <include refid="stockoutOrderDeclarePriceDO_selector"/>
    where id = #{id}
    and is_delete = 0
    for update
</select>

</mapper>
