<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sfebiz.supplychain.persistence.base.sku.dao.ProductDeclareGzBondedDao">

    <resultMap id="productDeclareGzBondedDOResult"
               type="com.sfebiz.supplychain.persistence.base.sku.domain.ProductDeclareGzBondedDO">
        <result column="product_declare_id" property="productDeclareId"/>
        <result column="customs_declaration_element" property="customsDeclarationElement"/>
        <result column="manufacturer" property="manufacturer"/>
        <result column="third_sku_id" property="thirdSkuId"/>
        <result column="import_unit_price_rmb" property="importUnitPriceRmb"/>
        <result column="retail_price_rmb" property="retailPriceRmb"/>
        <result column="declare_price_rmb" property="declarePriceRmb"/>
        <result column="sales_channel" property="salesChannel"/>
        <result column="barcode_graphic_url" property="barcodeGraphicUrl"/>
        <result column="attributes_graphic_url" property="attributesGraphicUrl"/>
        <result column="expiration_date_graphic_url" property="expirationDateGraphicUrl"/>
        <result column="product_graphic_url" property="productGraphicUrl"/>
        <result column="chinese_label_graphic_url" property="chineseLabelGraphicUrl"/>
        <result column="product_researched_graphic_url" property="productResearchedGraphicUrl"/>
        <result column="create_user" property="createUser"/>
        <result column="data_collect_user" property="dataCollectUser"/>
        <result column="filing_user" property="filingUser"/>
        <result column="provider_name" property="providerName"/>
        <result column="purchase_mode" property="purchaseMode"/>
        <result column="id" property="id"/>
        <result column="gmt_create" property="gmtCreate"/>
        <result column="gmt_modified" property="gmtModified"/>
    </resultMap>

    <sql id="productDeclareGzBondedDO_columns">
        product_declare_id,
        customs_declaration_element,
        manufacturer,
        third_sku_id,
        import_unit_price_rmb,
        retail_price_rmb,
        declare_price_rmb,
        sales_channel,
        barcode_graphic_url,
        attributes_graphic_url,
        expiration_date_graphic_url,
        product_graphic_url,
        chinese_label_graphic_url,
        product_researched_graphic_url,
        create_user,
        data_collect_user,
        filing_user,
        provider_name,
        purchase_mode,
        id,
        gmt_create,
        gmt_modified
    </sql>

    <sql id="productDeclareGzBondedDO_sqlForInsert">
        product_declare_id,
        customs_declaration_element,
        manufacturer,
        third_sku_id,
        import_unit_price_rmb,
        retail_price_rmb,
        declare_price_rmb,
        sales_channel,
        barcode_graphic_url,
        attributes_graphic_url,
        expiration_date_graphic_url,
        product_graphic_url,
        chinese_label_graphic_url,
        product_researched_graphic_url,
        create_user,
        data_collect_user,
        filing_user,
        provider_name,
        purchase_mode,
        id,
        gmt_create,
        gmt_modified
    </sql>

    <sql id="productDeclareGzBondedDO_columnsForInsert">
        #{productDeclareId},
        #{customsDeclarationElement},
        #{manufacturer},
        #{thirdSkuId},
        #{importUnitPriceRmb},
        #{retailPriceRmb},
        #{declarePriceRmb},
        #{salesChannel},
        #{barcodeGraphicUrl},
        #{attributesGraphicUrl},
        #{expirationDateGraphicUrl},
        #{productGraphicUrl},
        #{chineseLabelGraphicUrl},
        #{productResearchedGraphicUrl},
        #{createUser},
        #{dataCollectUser},
        #{filingUser},
        #{providerName},
        #{purchaseMode},
        #{id},
        now(),
        now()
    </sql>

    <sql id="productDeclareGzBondedDO_setterForUpdate">
        <set>
            gmt_modified = now(),
            <if test="productDeclareId != null">
                product_declare_id = #{productDeclareId},
            </if>
            <if test="customsDeclarationElement != null">
                customs_declaration_element = #{customsDeclarationElement},
            </if>
            <if test="manufacturer != null">
                manufacturer = #{manufacturer},
            </if>
            <if test="thirdSkuId != null">
                third_sku_id = #{thirdSkuId},
            </if>
            <if test="importUnitPriceRmb != null">
                import_unit_price_rmb = #{importUnitPriceRmb},
            </if>
            <if test="retailPriceRmb != null">
                retail_price_rmb = #{retailPriceRmb},
            </if>
            <if test="declarePriceRmb != null">
                declare_price_rmb = #{declarePriceRmb},
            </if>
            <if test="salesChannel != null">
                sales_channel = #{salesChannel},
            </if>
            <if test="barcodeGraphicUrl != null">
                barcode_graphic_url = #{barcodeGraphicUrl},
            </if>
            <if test="attributesGraphicUrl != null">
                attributes_graphic_url = #{attributesGraphicUrl},
            </if>
            <if test="expirationDateGraphicUrl != null">
                expiration_date_graphic_url = #{expirationDateGraphicUrl},
            </if>
            <if test="productGraphicUrl != null">
                product_graphic_url = #{productGraphicUrl},
            </if>
            <if test="chineseLabelGraphicUrl != null">
                chinese_label_graphic_url = #{chineseLabelGraphicUrl},
            </if>
            <if test="productResearchedGraphicUrl != null">
                product_researched_graphic_url = #{productResearchedGraphicUrl},
            </if>
            <if test="createUser != null">
                create_user = #{createUser},
            </if>
            <if test="dataCollectUser != null">
                data_collect_user = #{dataCollectUser},
            </if>
            <if test="filingUser != null">
                filing_user = #{filingUser},
            </if>
            <if test="providerName != null">
                provider_name = #{providerName},
            </if>
            <if test="purchaseMode != null">
                purchase_mode = #{purchaseMode},
            </if>
            <if test="id != null">
                id = #{id},
            </if>
        </set>
    </sql>

    <sql id="productDeclareGzBondedDO_selector">
        select
        <include refid="productDeclareGzBondedDO_columns"/>
        from sc_product_declare_gz_bonded
    </sql>

    <sql id="productDeclareGzBondedDO_query_segment">
        <trim prefix="WHERE" prefixOverrides="AND|OR">
            <if test="data.productDeclareId != null">
                AND product_declare_id = #{data.productDeclareId}
            </if>
            <if test="data.customsDeclarationElement != null">
                AND customs_declaration_element = #{data.customsDeclarationElement}
            </if>
            <if test="data.manufacturer != null">
                AND manufacturer = #{data.manufacturer}
            </if>
            <if test="data.thirdSkuId != null">
                AND third_sku_id = #{data.thirdSkuId}
            </if>
            <if test="data.importUnitPriceRmb != null">
                AND import_unit_price_rmb = #{data.importUnitPriceRmb}
            </if>
            <if test="data.retailPriceRmb != null">
                AND retail_price_rmb = #{data.retailPriceRmb}
            </if>
            <if test="data.declarePriceRmb != null">
                AND declare_price_rmb = #{data.declarePriceRmb}
            </if>
            <if test="data.salesChannel != null">
                AND sales_channel = #{data.salesChannel}
            </if>
            <if test="data.barcodeGraphicUrl != null">
                AND barcode_graphic_url = #{data.barcodeGraphicUrl}
            </if>
            <if test="data.attributesGraphicUrl != null">
                AND attributes_graphic_url = #{data.attributesGraphicUrl}
            </if>
            <if test="data.expirationDateGraphicUrl != null">
                AND expiration_date_graphic_url = #{data.expirationDateGraphicUrl}
            </if>
            <if test="data.productGraphicUrl != null">
                AND product_graphic_url = #{data.productGraphicUrl}
            </if>
            <if test="data.chineseLabelGraphicUrl != null">
                AND chinese_label_graphic_url = #{data.chineseLabelGraphicUrl}
            </if>
            <if test="data.productResearchedGraphicUrl != null">
                AND product_researched_graphic_url = #{data.productResearchedGraphicUrl}
            </if>
            <if test="data.createUser != null">
                AND create_user = #{data.createUser}
            </if>
            <if test="data.dataCollectUser != null">
                AND data_collect_user = #{data.dataCollectUser}
            </if>
            <if test="data.filingUser != null">
                AND filing_user = #{data.filingUser}
            </if>
            <if test="data.providerName != null">
                AND provider_name = #{data.providerName}
            </if>
            <if test="data.purchaseMode != null">
                AND purchase_mode = #{data.purchaseMode}
            </if>
            <if test="data.id != null">
                AND id = #{data.id}
            </if>
            <if test="data.gmtCreate != null">
                AND gmt_create = #{data.gmtCreate}
            </if>
            <if test="data.gmtModified != null">
                AND gmt_modified = #{data.gmtModified}
            </if>
            <if test="ins != null and ins != ''">
                AND
                <foreach collection="ins" item="item" open="(" separator="and" close=")">
                    ${item.column} in
                    <foreach collection="item.values" item="item" open="(" separator="," close=")">
                        #{item}
                    </foreach>
                </foreach>
            </if>
            <if test="notIns != null and notIns != ''">
                AND
                <foreach collection="notIns" item="item" open="(" separator="and" close=")">
                    ${item.column} not in
                    <foreach collection="item.values" item="item" open="(" separator="," close=")">
                        #{item}
                    </foreach>
                </foreach>
            </if>
            <if test="equals != null and equals != ''">
                AND
                <foreach collection="equals" item="item" open="(" separator="and" close=")">
                    ${item.column} = #{item.value}
                </foreach>
            </if>
            <if test="notEquals != null and notEquals != ''">
                AND
                <foreach collection="notEquals" item="item" open="(" separator="and" close=")">
                    ${item.column} = #{item.value}
                </foreach>
            </if>
            <if test="lts != null and lts != ''">
                AND
                <foreach collection="lts" item="item" open="(" separator="and" close=")">
                    ${item.column} <![CDATA[ < ]]> #{item.value}
                </foreach>
            </if>
            <if test="gts != null and gts != ''">
                AND
                <foreach collection="gts" item="item" open="(" separator="and" close=")">
                    ${item.column} <![CDATA[ > ]]> #{item.value}
                </foreach>
            </if>
            <if test="likes != null and likes != ''">
                AND
                <foreach collection="likes" item="item" open="(" separator="and" close=")">
                    ${item.column} like concat('%', #{item.value}, '%')
                </foreach>
            </if>
            <if test="ltes != null and ltes != ''">
                AND
                <foreach collection="ltes" item="item" open="(" separator="and" close=")">
                    ${item.column} <![CDATA[ <= ]]> #{item.value}
                </foreach>
            </if>
            <if test="gtes != null and gtes != ''">
                AND
                <foreach collection="gtes" item="item" open="(" separator="and" close=")">
                    ${item.column} <![CDATA[ >= ]]> #{item.value}
                </foreach>
            </if>
            <if test="ranges != null and ranges != ''">
                AND
                <foreach collection="ranges" item="item" open="(" separator="and" close=")">
                    ${item.column} <![CDATA[ >= ]]> #{item.from} and ${item.column} <![CDATA[ < ]]> #{item.to}
                </foreach>
            </if>
            AND is_delete = 0
        </trim>
    </sql>


    <insert id="insert" useGeneratedKeys="true" keyProperty="id"
            parameterType="com.sfebiz.supplychain.persistence.base.sku.domain.ProductDeclareGzBondedDO">
        insert into sc_product_declare_gz_bonded
        (
        <include refid="productDeclareGzBondedDO_sqlForInsert"/>
        ,is_delete
        )
        values
        (
        <include refid="productDeclareGzBondedDO_columnsForInsert"/>
        ,0
        )
    </insert>

    <update id="update" parameterType="com.sfebiz.supplychain.persistence.base.sku.domain.ProductDeclareGzBondedDO">
        update sc_product_declare_gz_bonded
        <include refid="productDeclareGzBondedDO_setterForUpdate"/>
        where id = #{id}
        and is_delete = 0
    </update>


    <update id="updateByQuery" parameterType="com.sfebiz.supplychain.persistence.base.sku.domain.ProductDeclareGzBondedDO">
        update sc_product_declare_gz_bonded
        <set>
            gmt_modified = now(),
            <if test="update.productDeclareId != null">
                product_declare_id = #{update.productDeclareId},
            </if>
            <if test="update.customsDeclarationElement != null">
                customs_declaration_element = #{update.customsDeclarationElement},
            </if>
            <if test="update.manufacturer != null">
                manufacturer = #{update.manufacturer},
            </if>
            <if test="update.thirdSkuId != null">
                third_sku_id = #{update.thirdSkuId},
            </if>
            <if test="update.importUnitPriceRmb != null">
                import_unit_price_rmb = #{update.importUnitPriceRmb},
            </if>
            <if test="update.retailPriceRmb != null">
                retail_price_rmb = #{update.retailPriceRmb},
            </if>
            <if test="update.declarePriceRmb != null">
                declare_price_rmb = #{update.declarePriceRmb},
            </if>
            <if test="update.salesChannel != null">
                sales_channel = #{update.salesChannel},
            </if>
            <if test="update.barcodeGraphicUrl != null">
                barcode_graphic_url = #{update.barcodeGraphicUrl},
            </if>
            <if test="update.attributesGraphicUrl != null">
                attributes_graphic_url = #{update.attributesGraphicUrl},
            </if>
            <if test="update.expirationDateGraphicUrl != null">
                expiration_date_graphic_url = #{update.expirationDateGraphicUrl},
            </if>
            <if test="update.productGraphicUrl != null">
                product_graphic_url = #{update.productGraphicUrl},
            </if>
            <if test="update.chineseLabelGraphicUrl != null">
                chinese_label_graphic_url = #{update.chineseLabelGraphicUrl},
            </if>
            <if test="update.productResearchedGraphicUrl != null">
                product_researched_graphic_url = #{update.productResearchedGraphicUrl},
            </if>
            <if test="update.createUser != null">
                create_user = #{update.createUser},
            </if>
            <if test="update.dataCollectUser != null">
                data_collect_user = #{update.dataCollectUser},
            </if>
            <if test="update.filingUser != null">
                filing_user = #{update.filingUser},
            </if>
            <if test="update.providerName != null">
                provider_name = #{update.providerName},
            </if>
            <if test="update.purchaseMode != null">
                purchase_mode = #{update.purchaseMode},
            </if>
            <if test="update.id != null">
                id = #{update.id},
            </if>
        </set>
        <include refid="productDeclareGzBondedDO_query_segment"/>
    </update>


    <insert id="insertOrUpdate" useGeneratedKeys="true" keyProperty="id"
            parameterType="com.sfebiz.supplychain.persistence.base.sku.domain.ProductDeclareGzBondedDO">
        insert into sc_product_declare_gz_bonded
        (
        <include refid="productDeclareGzBondedDO_sqlForInsert"/>
        ,is_delete
        )
        values
        (
        <include refid="productDeclareGzBondedDO_columnsForInsert"/>
        ,0
        )
        on duplicate key update
        gmt_modified = now()
        ,is_delete = 0
        <if test="productDeclareId != null">
            ,product_declare_id = #{productDeclareId}
        </if>
        <if test="customsDeclarationElement != null">
            ,customs_declaration_element = #{customsDeclarationElement}
        </if>
        <if test="manufacturer != null">
            ,manufacturer = #{manufacturer}
        </if>
        <if test="thirdSkuId != null">
            ,third_sku_id = #{thirdSkuId}
        </if>
        <if test="importUnitPriceRmb != null">
            ,import_unit_price_rmb = #{importUnitPriceRmb}
        </if>
        <if test="retailPriceRmb != null">
            ,retail_price_rmb = #{retailPriceRmb}
        </if>
        <if test="declarePriceRmb != null">
            ,declare_price_rmb = #{declarePriceRmb}
        </if>
        <if test="salesChannel != null">
            ,sales_channel = #{salesChannel}
        </if>
        <if test="barcodeGraphicUrl != null">
            ,barcode_graphic_url = #{barcodeGraphicUrl}
        </if>
        <if test="attributesGraphicUrl != null">
            ,attributes_graphic_url = #{attributesGraphicUrl}
        </if>
        <if test="expirationDateGraphicUrl != null">
            ,expiration_date_graphic_url = #{expirationDateGraphicUrl}
        </if>
        <if test="productGraphicUrl != null">
            ,product_graphic_url = #{productGraphicUrl}
        </if>
        <if test="chineseLabelGraphicUrl != null">
            ,chinese_label_graphic_url = #{chineseLabelGraphicUrl}
        </if>
        <if test="productResearchedGraphicUrl != null">
            ,product_researched_graphic_url = #{productResearchedGraphicUrl}
        </if>
        <if test="createUser != null">
            ,create_user = #{createUser}
        </if>
        <if test="dataCollectUser != null">
            ,data_collect_user = #{dataCollectUser}
        </if>
        <if test="filingUser != null">
            ,filing_user = #{filingUser}
        </if>
        <if test="providerName != null">
            ,provider_name = #{providerName}
        </if>
        <if test="purchaseMode != null">
            ,purchase_mode = #{purchaseMode}
        </if>
    </insert>

    <!-- Delete -->
    <update id="delete">
        update sc_product_declare_gz_bonded
        set is_delete = 1, gmt_modified = now()
        <include refid="productDeclareGzBondedDO_query_segment"/>
    </update>
    <update id="deleteById">
        update sc_product_declare_gz_bonded
        set is_delete = 1, gmt_modified = now()
        where id = #{id}
    </update>


    <!-- query class -->
    <sql id="productDeclareGzBondedDO_groupBy">
        <if test="groupBys != null and groupBys != ''">
            group by
            <foreach collection="groupBys" item="item" open="" separator="," close="">
                #{item}
            </foreach>
        </if>
    </sql>

    <sql id="productDeclareGzBondedDO_orderby">
        <if test="orderBys != null and orderBys != ''">
            order by
            <foreach collection="orderBys" item="item" open="" separator="," close="">
                ${item.column} ${item.direction}
            </foreach>
        </if>
    </sql>


    <select id="query" resultMap="productDeclareGzBondedDOResult"
            parameterType="com.sfebiz.supplychain.persistence.base.sku.domain.ProductDeclareGzBondedDO">
        <include refid="productDeclareGzBondedDO_selector"/>
        <include refid="productDeclareGzBondedDO_query_segment"/>
        <include refid="productDeclareGzBondedDO_groupBy"/>
        <include refid="productDeclareGzBondedDO_orderby"/>
    </select>

    <select id="query4Page" resultMap="productDeclareGzBondedDOResult"
            parameterType="com.sfebiz.supplychain.persistence.base.sku.domain.ProductDeclareGzBondedDO">
        <include refid="productDeclareGzBondedDO_selector"/>
        <include refid="productDeclareGzBondedDO_query_segment"/>
        <include refid="productDeclareGzBondedDO_groupBy"/>
        <include refid="productDeclareGzBondedDO_orderby"/>
        limit ${startRowForMysql}, ${pageSize}
    </select>


    <select id="count" resultType="java.lang.Long">
        SELECT COUNT(1) FROM sc_product_declare_gz_bonded
        <include refid="productDeclareGzBondedDO_query_segment"/>
    </select>

    <select id="getById" resultMap="productDeclareGzBondedDOResult">
        <include refid="productDeclareGzBondedDO_selector"/>
        where id = #{id}
        and is_delete = 0
    </select>

    <select id="getByIdForUpdate" resultMap="productDeclareGzBondedDOResult">
        <include refid="productDeclareGzBondedDO_selector"/>
        where id = #{id}
        and is_delete = 0
        for update
    </select>

    <select id="getByProductDeclareId" resultMap="productDeclareGzBondedDOResult" parameterType="java.lang.Long">
        <include refid="productDeclareGzBondedDO_selector"/>
        where product_declare_id = #{productDeclareId}
        and is_delete = 0
    </select>

</mapper>
