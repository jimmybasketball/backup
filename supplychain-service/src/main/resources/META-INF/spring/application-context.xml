<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                            http://www.springframework.org/schema/context
                            http://www.springframework.org/schema/context/spring-context-4.0.xsd"
       default-lazy-init="false">
    <import resource="classpath*:persistance.xml"/>

    <context:property-placeholder file-encoding="UTF-8" ignore-resource-not-found="true"
                                  location="classpath:config.properties"/>
    <context:component-scan base-package="com.sfebiz.supplychain"/>


    <bean id="threadPoolTaskExecutor"
          class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">

        <!-- 核心线程数，默认为1 -->
        <property name="corePoolSize" value="10"/>

        <!-- 最大线程数，默认为Integer.MAX_VALUE -->
        <property name="maxPoolSize" value="200"/>

        <!-- 队列最大长度，一般需要设置值>=notifyScheduledMainExecutor.maxNum；默认为Integer.MAX_VALUE
            <property name="queueCapacity" value="1000" /> -->

        <!-- 线程池维护线程所允许的空闲时间，默认为60s -->
        <property name="keepAliveSeconds" value="300"/>

        <!-- 线程池对拒绝任务（无线程可用）的处理策略，目前只支持AbortPolicy、CallerRunsPolicy；默认为后者 -->
        <property name="rejectedExecutionHandler">
            <!-- AbortPolicy:直接抛出java.util.concurrent.RejectedExecutionException异常 -->
            <!-- CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 -->
            <!-- DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
            <!-- DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
            <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy"/>
        </property>
    </bean>

    <!-- jedisPool 配置-->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig" >
        <!--最大空闲数-->
        <property name="maxIdle" value="${com.sfebiz.supplychain.reidscluster.maxIdle}" />
        <!--最大建立连接等待时间-->
        <property name="maxWaitMillis" value="${com.sfebiz.supplychain.reidscluster.maxWaitTime}" />
        <!--是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个-->
        <property name="testOnBorrow" value="${com.sfebiz.supplychain.reidscluster.testOnBorrow}" />
        <property name="maxTotal" value="${com.sfebiz.supplychain.reidscluster.maxTotal}" />
        <property name="minIdle" value="${com.sfebiz.supplychain.reidscluster.minIdle}" />
    </bean >
    <!-- jedisCluster 集群 -->
    <bean id="jedisCluster"  class="com.sfebiz.supplychain.config.JedisClusterFactory" >
        <property name="addresses" value="${com.sfebiz.supplychain.reidscluster.server.addresses}" />
        <property name="timeout" value="${com.sfebiz.supplychain.reidscluster.timeout}" />
        <property name="maxRedirections" value="6" />
        <property name="genericObjectPoolConfig" ref="poolConfig" />
    </bean >



    <bean id="exceptionHandlerMap" class="java.util.HashMap">
        <constructor-arg>
            <map>
                <entry key="STOCKOUT_CREATE_EXCEPTION" value-ref="stockoutCreateExceptionHandler"/>
                <entry key="STOCKOUT_SEND_EXCEPTION" value-ref="stockoutSendExceptionHandler"/>
                <entry key="STOCKOUT_EXCEPTION" value-ref="stockoutStockExceptionHandler"/>
            </map>
        </constructor-arg>
    </bean>

    <bean id="autotask" class="com.sfebiz.supplychain.service.AutoTaskContainer" depends-on="distributedLock">
        <!-- <property name="msgProducerMap">
            <map>
                <entry key="SUPPLY_CHAIN_EVENT" value-ref="supplyChainMessageProducer"/>
                <entry key="ORDEREVENT" value-ref="logisticsMessageProducer"/>
                <entry key="SUPPLY_CHAIN_ROUTE_EVENT" value-ref="supplyChainRouteMessageProducer"/>
                <entry key="SC_EFFICIENCY_ALARM" value-ref="supplyChainEfficiencyAlarmProducer"/>
            </map>
        </property> -->
    </bean>

    <!-- 路由读写操作实现 -->
    <bean id="routeOperation" class="com.sfebiz.supplychain.service.route.op.impl.RouteOperationImpl">
        <!-- 写操作集合 -->
        <property name="writeOperations">
            <list>
                <ref bean="routeOperationOnOTS"/>
                <ref bean="routeOperationOnRedis"/>
            </list>
        </property>

        <!-- 读操作集合 -->
        <property name="readOperations">
            <list>
                <ref bean="routeOperationOnRedis"/>
                <ref bean="routeOperationOnOTS"/>
            </list>
        </property>
    </bean>


    <!-- 路由获取更新处理链 begin -->
    <!-- 国际段路由获取更新 -->
    <bean id="internationalRouteFetchHandler"
          class="com.sfebiz.supplychain.service.route.handler.impl.InternationalRouteFetchHandler">
        <!-- 下一段是国内段 -->
        <property name="nextHandler" ref="domesticRouteFetchHandler"/>
    </bean>

    <!-- 国内段路由获取更新 -->
    <bean id="domesticRouteFetchHandler"
          class="com.sfebiz.supplychain.service.route.handler.impl.DomesticRouteFetchHandler"/>
    <!-- 路由获取更新处理链 end -->

</beans>
